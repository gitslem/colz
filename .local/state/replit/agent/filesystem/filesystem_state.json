{"file_contents":{"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  await setupAuth(app);\n\n  const objectStorageService = new ObjectStorageService();\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.patch('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { firstName, lastName } = req.body;\n      const user = await storage.updateUserDetails(userId, { firstName, lastName });\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.post('/api/users/role', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { role } = req.body;\n\n      if (!role || (role !== \"artist\" && role !== \"label\")) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n\n      const user = await storage.updateUserRole(userId, role);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating role:\", error);\n      res.status(500).json({ message: \"Failed to update role\" });\n    }\n  });\n\n  app.get('/api/profile/artist', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getArtistProfile(userId);\n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching artist profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post('/api/profile/artist', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.createOrUpdateArtistProfile(req.body, userId);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error saving artist profile:\", error);\n      res.status(500).json({ message: \"Failed to save profile\" });\n    }\n  });\n\n  app.get('/api/profile/label', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getLabelProfile(userId);\n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching label profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post('/api/profile/label', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      console.log('[LABEL PROFILE] Saving profile for user:', userId, 'Data:', req.body);\n      const profile = await storage.createOrUpdateLabelProfile(req.body, userId);\n      console.log('[LABEL PROFILE] Profile saved successfully:', profile);\n      res.status(201).json(profile);\n    } catch (error) {\n      console.error(\"[LABEL PROFILE] Error saving label profile:\", error);\n      res.status(500).json({ message: \"Failed to save profile\" });\n    }\n  });\n\n  app.get('/api/artists/:id', async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const artist = await storage.getArtistProfile(userId);\n      if (!artist) {\n        return res.status(404).json({ message: \"Artist not found\" });\n      }\n      const user = await storage.getUser(userId);\n      res.json({ ...artist, user });\n    } catch (error) {\n      console.error(\"Error fetching artist:\", error);\n      res.status(500).json({ message: \"Failed to fetch artist\" });\n    }\n  });\n\n  app.get('/api/artists/:id/projects', async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const projects = await storage.getProjectsByArtist(userId);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching artist projects:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post('/api/objects/upload', isAuthenticated, async (req, res) => {\n    try {\n      const privateDir = objectStorageService.getPrivateObjectDir();\n      if (!privateDir) {\n        return res.status(503).json({ \n          message: \"Object storage is not configured. Please set up object storage in the Object Storage tool.\" \n        });\n      }\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ message: \"Failed to get upload URL\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", isAuthenticated, async (req, res) => {\n    const userId = (req.user as any)?.claims?.sub;\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.put('/api/profile/image', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { imageURL } = req.body;\n\n      if (!imageURL) {\n        return res.status(400).json({ message: \"imageURL is required\" });\n      }\n\n      const imagePath = await objectStorageService.trySetObjectEntityAclPolicy(\n        imageURL,\n        {\n          owner: userId,\n          visibility: \"public\",\n        }\n      );\n\n      await storage.updateUserProfileImage(userId, imagePath);\n      res.json({ imagePath });\n    } catch (error) {\n      console.error(\"Error setting profile image:\", error);\n      res.status(500).json({ message: \"Failed to set profile image\" });\n    }\n  });\n\n  app.put('/api/projects/media', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { mediaURL } = req.body;\n\n      if (!mediaURL) {\n        return res.status(400).json({ message: \"mediaURL is required\" });\n      }\n\n      const mediaPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        mediaURL,\n        {\n          owner: userId,\n          visibility: \"public\",\n        }\n      );\n\n      res.json({ mediaPath });\n    } catch (error) {\n      console.error(\"Error setting project media:\", error);\n      res.status(500).json({ message: \"Failed to set project media\" });\n    }\n  });\n\n  app.get('/api/artists', async (req, res) => {\n    try {\n      const profiles = await storage.getArtistProfiles();\n      const profilesWithUsers = await Promise.all(\n        profiles.map(async (profile) => {\n          const user = await storage.getUser(profile.userId);\n          return { ...profile, user };\n        })\n      );\n      res.json(profilesWithUsers);\n    } catch (error) {\n      console.error(\"Error fetching artists:\", error);\n      res.status(500).json({ message: \"Failed to fetch artists\" });\n    }\n  });\n\n  app.get('/api/opportunities', async (req, res) => {\n    try {\n      const opps = await storage.getOpportunities();\n      const oppsWithLabels = await Promise.all(\n        opps.map(async (opp) => {\n          const label = await storage.getLabelProfileById(opp.labelId);\n          return { ...opp, label };\n        })\n      );\n      res.json(oppsWithLabels);\n    } catch (error) {\n      console.error(\"Error fetching opportunities:\", error);\n      res.status(500).json({ message: \"Failed to fetch opportunities\" });\n    }\n  });\n\n  app.post('/api/opportunities', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      console.log('[OPPORTUNITY] Creating opportunity for user:', userId);\n      const labelProfile = await storage.getLabelProfile(userId);\n\n      if (!labelProfile) {\n        console.log('[OPPORTUNITY] No label profile found for user:', userId);\n        return res.status(403).json({ message: \"Label profile required\" });\n      }\n\n      const { deadline, ...restBody } = req.body;\n      console.log('[OPPORTUNITY] Creating opportunity with data:', { ...restBody, labelId: labelProfile.id });\n      const opportunity = await storage.createOpportunity({\n        ...restBody,\n        labelId: labelProfile.id,\n        deadline: deadline ? new Date(deadline) : null,\n      });\n      console.log('[OPPORTUNITY] Opportunity created successfully:', opportunity);\n      res.status(201).json(opportunity);\n    } catch (error) {\n      console.error(\"[OPPORTUNITY] Error creating opportunity:\", error);\n      res.status(500).json({ message: \"Failed to create opportunity\" });\n    }\n  });\n\n  app.get('/api/opportunities/:id', async (req, res) => {\n    try {\n      const opportunity = await storage.getOpportunityById(req.params.id);\n      if (!opportunity) {\n        return res.status(404).json({ message: \"Opportunity not found\" });\n      }\n      const label = await storage.getLabelProfileById(opportunity.labelId);\n      res.json({ ...opportunity, label });\n    } catch (error) {\n      console.error(\"Error fetching opportunity:\", error);\n      res.status(500).json({ message: \"Failed to fetch opportunity\" });\n    }\n  });\n\n  app.post('/api/opportunities/:id/apply', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const artistProfile = await storage.getArtistProfile(userId);\n\n      if (!artistProfile) {\n        return res.status(403).json({ message: \"Artist profile required\" });\n      }\n\n      const application = await storage.createApplication({\n        opportunityId: req.params.id,\n        artistId: artistProfile.id,\n        coverLetter: req.body.coverLetter || \"\",\n      });\n\n      const opportunity = await storage.getOpportunityById(req.params.id);\n      const labelProfile = opportunity && await storage.getLabelProfileById(opportunity.labelId);\n      const artist = await storage.getUser(userId);\n      \n      if (labelProfile && opportunity && artist) {\n        await storage.createNotification({\n          userId: labelProfile.userId,\n          type: 'application_submitted',\n          title: 'New Application',\n          message: `${artist.firstName || 'Someone'} applied to \"${opportunity.title}\"`,\n          relatedId: application.id,\n          read: 0,\n        });\n      }\n\n      res.json(application);\n    } catch (error) {\n      console.error(\"Error creating application:\", error);\n      res.status(500).json({ message: \"Failed to create application\" });\n    }\n  });\n\n  app.get('/api/projects', async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      const projectsWithArtists = await Promise.all(\n        projects.map(async (project) => {\n          const artist = await storage.getArtistProfileById(project.artistId);\n          if (!artist) return null;\n          const user = await storage.getUser(artist.userId);\n          return { ...project, artist: { ...artist, user } };\n        })\n      );\n      res.json(projectsWithArtists.filter(p => p !== null));\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post('/api/projects', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const artistProfile = await storage.getArtistProfile(userId);\n\n      if (!artistProfile) {\n        return res.status(403).json({ message: \"Artist profile required\" });\n      }\n\n      const project = await storage.createProject({\n        ...req.body,\n        artistId: artistProfile.id,\n      });\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error creating project:\", error);\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  app.get('/api/projects/:id', async (req, res) => {\n    try {\n      const project = await storage.getProjectById(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      const artist = await storage.getArtistProfileById(project.artistId);\n      if (!artist) {\n        return res.status(404).json({ message: \"Artist not found\" });\n      }\n      const user = await storage.getUser(artist.userId);\n      res.json({ ...project, artist: { ...artist, user } });\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.get('/api/applications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const labelProfile = await storage.getLabelProfile(userId);\n\n      if (!labelProfile) {\n        return res.status(403).json({ message: \"Label profile required\" });\n      }\n\n      const opportunities = await storage.getOpportunitiesByLabel(labelProfile.id);\n      const allApplications = [];\n\n      for (const opp of opportunities) {\n        const apps = await storage.getApplicationsByOpportunity(opp.id);\n        for (const app of apps) {\n          const artist = await storage.getArtistProfileById(app.artistId);\n          if (artist) {\n            const user = await storage.getUser(artist.userId);\n            allApplications.push({\n              ...app,\n              artist: { ...artist, user },\n              opportunity: opp,\n            });\n          }\n        }\n      }\n\n      res.json(allApplications);\n    } catch (error) {\n      console.error(\"Error fetching applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  app.patch('/api/applications/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const { status } = req.body;\n      if (!status || !['pending', 'accepted', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const application = await storage.updateApplicationStatus(req.params.id, status);\n      \n      if (status === 'accepted' || status === 'rejected') {\n        const artistProfile = await storage.getArtistProfileById(application.artistId);\n        const opportunity = await storage.getOpportunityById(application.opportunityId);\n        \n        if (artistProfile && opportunity) {\n          await storage.createNotification({\n            userId: artistProfile.userId,\n            type: `application_${status}`,\n            title: status === 'accepted' ? 'Application Accepted!' : 'Application Status Update',\n            message: `Your application for \"${opportunity.title}\" has been ${status}`,\n            relatedId: application.id,\n            read: 0,\n          });\n        }\n      }\n\n      res.json(application);\n    } catch (error) {\n      console.error(\"Error updating application status:\", error);\n      res.status(500).json({ message: \"Failed to update application status\" });\n    }\n  });\n\n  app.get('/api/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const conversations = await storage.getConversationsByUser(userId);\n      \n      const conversationsWithParticipants = await Promise.all(\n        conversations.map(async (conv) => {\n          const otherUserId = conv.participant1Id === userId ? conv.participant2Id : conv.participant1Id;\n          const otherUser = await storage.getUser(otherUserId);\n          return {\n            ...conv,\n            otherUser,\n          };\n        })\n      );\n\n      res.json(conversationsWithParticipants);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get('/api/conversations/:userId', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUserId = req.user.claims.sub;\n      const otherUserId = req.params.userId;\n      \n      const conversation = await storage.getOrCreateConversation(currentUserId, otherUserId);\n      const otherUser = await storage.getUser(otherUserId);\n      \n      res.json({\n        ...conversation,\n        otherUser,\n      });\n    } catch (error) {\n      console.error(\"Error getting conversation:\", error);\n      res.status(500).json({ message: \"Failed to get conversation\" });\n    }\n  });\n\n  app.get('/api/messages/:conversationId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const conversationId = req.params.conversationId;\n      \n      const conversations = await storage.getConversationsByUser(userId);\n      const conversation = conversations.find(c => c.id === conversationId);\n      \n      if (!conversation) {\n        return res.status(403).json({ message: \"Access denied - not a participant in this conversation\" });\n      }\n\n      const messages = await storage.getMessagesByConversation(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post('/api/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { conversationId, content } = req.body;\n\n      if (!conversationId || !content) {\n        return res.status(400).json({ message: \"Conversation ID and content are required\" });\n      }\n\n      const conversations = await storage.getConversationsByUser(userId);\n      const conversation = conversations.find(c => c.id === conversationId);\n      \n      if (!conversation) {\n        return res.status(403).json({ message: \"Access denied - not a participant in this conversation\" });\n      }\n\n      const message = await storage.sendMessage({\n        conversationId,\n        senderId: userId,\n        content,\n        read: 0,\n      });\n\n      const recipientId = conversation.participant1Id === userId ? conversation.participant2Id : conversation.participant1Id;\n      const sender = await storage.getUser(userId);\n      \n      await storage.createNotification({\n        userId: recipientId,\n        type: 'new_message',\n        title: 'New Message',\n        message: `${sender?.firstName || 'Someone'} sent you a message`,\n        relatedId: conversationId,\n        read: 0,\n      });\n\n      res.json(message);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const notifications = await storage.getNotificationsByUser(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.get('/api/notifications/unread-count', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const count = await storage.getUnreadNotificationCount(userId);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error fetching unread count:\", error);\n      res.status(500).json({ message: \"Failed to fetch unread count\" });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const notification = await storage.markNotificationAsRead(req.params.id, userId);\n      if (!notification) {\n        return res.status(404).json({ message: \"Notification not found or access denied\" });\n      }\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.post('/api/notifications/mark-all-read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error);\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  app.get('/api/preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const prefs = await storage.getUserPreferences(userId);\n      \n      if (!prefs) {\n        const defaultPrefs = await storage.createOrUpdateUserPreferences({\n          emailNotifications: 1,\n          applicationNotifications: 1,\n          messageNotifications: 1,\n          opportunityNotifications: 1,\n          profileVisibility: 'public',\n        }, userId);\n        return res.json(defaultPrefs);\n      }\n      \n      res.json(prefs);\n    } catch (error) {\n      console.error(\"Error fetching preferences:\", error);\n      res.status(500).json({ message: \"Failed to fetch preferences\" });\n    }\n  });\n\n  app.post('/api/preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const prefs = await storage.createOrUpdateUserPreferences(req.body, userId);\n      res.json(prefs);\n    } catch (error) {\n      console.error(\"Error updating preferences:\", error);\n      res.status(500).json({ message: \"Failed to update preferences\" });\n    }\n  });\n\n  app.get('/api/analytics/opportunities', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'label') {\n        return res.status(403).json({ message: \"Only labels can access analytics\" });\n      }\n\n      const labelProfile = await storage.getLabelProfile(userId);\n      if (!labelProfile) {\n        return res.status(404).json({ message: \"Label profile not found\" });\n      }\n\n      const analytics = await storage.getOpportunityAnalytics(labelProfile.id);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching opportunity analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  app.get('/api/analytics/application-breakdown', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'label') {\n        return res.status(403).json({ message: \"Only labels can access analytics\" });\n      }\n\n      const labelProfile = await storage.getLabelProfile(userId);\n      if (!labelProfile) {\n        return res.status(404).json({ message: \"Label profile not found\" });\n      }\n\n      const breakdown = await storage.getApplicationStatusBreakdown(labelProfile.id);\n      res.json(breakdown);\n    } catch (error) {\n      console.error(\"Error fetching application breakdown:\", error);\n      res.status(500).json({ message: \"Failed to fetch application breakdown\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":23927},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table - required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - required for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  // User role: 'artist' or 'label'\n  role: varchar(\"role\", { length: 20 }),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Artist profiles table\nexport const artistProfiles = pgTable(\"artist_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  bio: text(\"bio\"),\n  location: varchar(\"location\", { length: 255 }),\n  website: varchar(\"website\", { length: 255 }),\n  genres: text(\"genres\").array().notNull().default(sql`ARRAY[]::text[]`),\n  skills: text(\"skills\").array().notNull().default(sql`ARRAY[]::text[]`),\n  portfolioSamples: text(\"portfolio_samples\").array().notNull().default(sql`ARRAY[]::text[]`),\n  socialLinks: jsonb(\"social_links\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const artistProfilesRelations = relations(artistProfiles, ({ one }) => ({\n  user: one(users, {\n    fields: [artistProfiles.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertArtistProfileSchema = createInsertSchema(artistProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertArtistProfile = z.infer<typeof insertArtistProfileSchema>;\nexport type ArtistProfile = typeof artistProfiles.$inferSelect;\n\n// Label profiles table\nexport const labelProfiles = pgTable(\"label_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  companyName: varchar(\"company_name\", { length: 255 }).notNull(),\n  about: text(\"about\"),\n  website: varchar(\"website\", { length: 255 }),\n  logoUrl: varchar(\"logo_url\", { length: 500 }),\n  location: varchar(\"location\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const labelProfilesRelations = relations(labelProfiles, ({ one }) => ({\n  user: one(users, {\n    fields: [labelProfiles.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertLabelProfileSchema = createInsertSchema(labelProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertLabelProfile = z.infer<typeof insertLabelProfileSchema>;\nexport type LabelProfile = typeof labelProfiles.$inferSelect;\n\n// Opportunities table (posted by labels)\nexport const opportunities = pgTable(\"opportunities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  labelId: varchar(\"label_id\").notNull().references(() => labelProfiles.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  requiredSkills: text(\"required_skills\").array().notNull().default(sql`ARRAY[]::text[]`),\n  genres: text(\"genres\").array().notNull().default(sql`ARRAY[]::text[]`),\n  compensation: varchar(\"compensation\", { length: 255 }),\n  deadline: timestamp(\"deadline\"),\n  status: varchar(\"status\", { length: 50 }).notNull().default('open'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const opportunitiesRelations = relations(opportunities, ({ one }) => ({\n  label: one(labelProfiles, {\n    fields: [opportunities.labelId],\n    references: [labelProfiles.id],\n  }),\n}));\n\nexport const insertOpportunitySchema = createInsertSchema(opportunities).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertOpportunity = z.infer<typeof insertOpportunitySchema>;\nexport type Opportunity = typeof opportunities.$inferSelect;\n\n// Projects table (posted by artists)\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  artistId: varchar(\"artist_id\").notNull().references(() => artistProfiles.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  mediaUrl: varchar(\"media_url\", { length: 500 }),\n  mediaType: varchar(\"media_type\", { length: 50 }).default('image'),\n  mediaDuration: integer(\"media_duration\"),\n  genres: text(\"genres\").array().notNull().default(sql`ARRAY[]::text[]`),\n  collaborators: integer(\"collaborators\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projectsRelations = relations(projects, ({ one }) => ({\n  artist: one(artistProfiles, {\n    fields: [projects.artistId],\n    references: [artistProfiles.id],\n  }),\n}));\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\n// Applications table (artists applying to opportunities)\nexport const applications = pgTable(\"applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  opportunityId: varchar(\"opportunity_id\").notNull().references(() => opportunities.id, { onDelete: 'cascade' }),\n  artistId: varchar(\"artist_id\").notNull().references(() => artistProfiles.id, { onDelete: 'cascade' }),\n  coverLetter: text(\"cover_letter\"),\n  status: varchar(\"status\", { length: 50 }).notNull().default('pending'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const applicationsRelations = relations(applications, ({ one }) => ({\n  opportunity: one(opportunities, {\n    fields: [applications.opportunityId],\n    references: [opportunities.id],\n  }),\n  artist: one(artistProfiles, {\n    fields: [applications.artistId],\n    references: [artistProfiles.id],\n  }),\n}));\n\nexport const insertApplicationSchema = createInsertSchema(applications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertApplication = z.infer<typeof insertApplicationSchema>;\nexport type Application = typeof applications.$inferSelect;\n\n// Conversations table (1-to-1 messaging between users)\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  participant1Id: varchar(\"participant1_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  participant2Id: varchar(\"participant2_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const conversationsRelations = relations(conversations, ({ one }) => ({\n  participant1: one(users, {\n    fields: [conversations.participant1Id],\n    references: [users.id],\n  }),\n  participant2: one(users, {\n    fields: [conversations.participant2Id],\n    references: [users.id],\n  }),\n}));\n\nexport type Conversation = typeof conversations.$inferSelect;\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => conversations.id, { onDelete: 'cascade' }),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  content: text(\"content\").notNull(),\n  read: integer(\"read\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  conversation: one(conversations, {\n    fields: [messages.conversationId],\n    references: [conversations.id],\n  }),\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'application_submitted', 'application_accepted', 'application_rejected', 'new_message', 'new_opportunity'\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  relatedId: varchar(\"related_id\"), // ID of related entity (application, message, opportunity)\n  read: integer(\"read\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n\n// User preferences table\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id, { onDelete: 'cascade' }),\n  emailNotifications: integer(\"email_notifications\").notNull().default(1),\n  applicationNotifications: integer(\"application_notifications\").notNull().default(1),\n  messageNotifications: integer(\"message_notifications\").notNull().default(1),\n  opportunityNotifications: integer(\"opportunity_notifications\").notNull().default(1),\n  profileVisibility: varchar(\"profile_visibility\", { length: 20 }).notNull().default('public'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const userPreferencesRelations = relations(userPreferences, ({ one }) => ({\n  user: one(users, {\n    fields: [userPreferences.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\n","size_bytes":11267},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\nexport enum ObjectAccessGroupType {}\n\nexport interface ObjectAccessGroup {\n  type: ObjectAccessGroupType;\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n  return granted === ObjectPermission.WRITE;\n}\n\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  if (!userId) {\n    return false;\n  }\n\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":2707},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/profile.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, X, Upload, ExternalLink } from \"lucide-react\";\nimport type { ArtistProfile, LabelProfile } from \"@shared/schema\";\nimport { SimpleUploader } from \"@/components/SimpleUploader\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst COMMON_GENRES = [\n  \"Pop\",\n  \"Rock\",\n  \"Hip Hop\",\n  \"Electronic\",\n  \"Jazz\",\n  \"Classical\",\n  \"R&B\",\n  \"Country\",\n  \"Blues\",\n  \"Reggae\",\n];\n\nconst COMMON_SKILLS = [\n  \"Vocals\",\n  \"Guitar\",\n  \"Piano\",\n  \"Drums\",\n  \"Bass\",\n  \"Production\",\n  \"Mixing\",\n  \"Mastering\",\n  \"Songwriting\",\n  \"DJ\",\n];\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const { data: artistProfile } = useQuery<ArtistProfile>({\n    queryKey: [\"/api/profile/artist\"],\n    enabled: user?.role === \"artist\",\n    retry: false,\n  });\n\n  const { data: labelProfile } = useQuery<LabelProfile>({\n    queryKey: [\"/api/profile/label\"],\n    enabled: user?.role === \"label\",\n    retry: false,\n  });\n\n  const [bio, setBio] = useState(\"\");\n  const [location, setLocationField] = useState(\"\");\n  const [website, setWebsite] = useState(\"\");\n  const [genres, setGenres] = useState<string[]>([]);\n  const [skills, setSkills] = useState<string[]>([]);\n  const [companyName, setCompanyName] = useState(\"\");\n  const [about, setAbout] = useState(\"\");\n  const [logoUrl, setLogoUrl] = useState(\"\");\n  const [newGenre, setNewGenre] = useState(\"\");\n  const [newSkill, setNewSkill] = useState(\"\");\n  const [portfolioSamples, setPortfolioSamples] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (user?.role === \"artist\" && artistProfile) {\n      setBio(artistProfile.bio || \"\");\n      setLocationField(artistProfile.location || \"\");\n      setWebsite(artistProfile.website || \"\");\n      setGenres(artistProfile.genres || []);\n      setSkills(artistProfile.skills || []);\n      setPortfolioSamples(artistProfile.portfolioSamples || []);\n    } else if (user?.role === \"label\" && labelProfile) {\n      setCompanyName(labelProfile.companyName || \"\");\n      setAbout(labelProfile.about || \"\");\n      setWebsite(labelProfile.website || \"\");\n      setLocationField(labelProfile.location || \"\");\n      setLogoUrl(labelProfile.logoUrl || \"\");\n    }\n  }, [user, artistProfile, labelProfile]);\n\n  const saveProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (user?.role === \"artist\") {\n        return await apiRequest(\"POST\", \"/api/profile/artist\", data);\n      } else {\n        return await apiRequest(\"POST\", \"/api/profile/label\", data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile/artist\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile/label\"] });\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    if (user?.role === \"artist\") {\n      saveProfileMutation.mutate({\n        bio,\n        location,\n        website,\n        genres,\n        skills,\n        portfolioSamples,\n      });\n    } else if (user?.role === \"label\") {\n      if (!companyName.trim()) {\n        toast({\n          title: \"Error\",\n          description: \"Company name is required\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      saveProfileMutation.mutate({\n        companyName,\n        about,\n        website,\n        location,\n        logoUrl,\n      });\n    }\n  };\n\n  const addGenre = (genre: string) => {\n    if (genre && !genres.includes(genre)) {\n      setGenres([...genres, genre]);\n    }\n    setNewGenre(\"\");\n  };\n\n  const removeGenre = (genre: string) => {\n    setGenres(genres.filter((g) => g !== genre));\n  };\n\n  const addSkill = (skill: string) => {\n    if (skill && !skills.includes(skill)) {\n      setSkills([...skills, skill]);\n    }\n    setNewSkill(\"\");\n  };\n\n  const removeSkill = (skill: string) => {\n    setSkills(skills.filter((s) => s !== skill));\n  };\n\n  const handleProfileImageComplete = async (uploadURL: string) => {\n    try {\n      const response = await apiRequest(\"PUT\", \"/api/profile/image\", {\n        imageURL: uploadURL,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"Profile image updated successfully\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePortfolioComplete = async (uploadURL: string) => {\n    setPortfolioSamples([...portfolioSamples, uploadURL]);\n    toast({\n      title: \"Success\",\n      description: \"Portfolio sample added. Remember to save your profile.\",\n    });\n  };\n\n  const removePortfolioSample = (url: string) => {\n    setPortfolioSamples(portfolioSamples.filter((s) => s !== url));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation(\"/\")} data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"font-serif text-3xl font-bold\">Profile</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage your {user?.role} profile\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8\">\n        <div className=\"space-y-8\">\n          <Card className=\"p-6\">\n            <h2 className=\"font-serif text-xl font-semibold\">\n              Profile Picture\n            </h2>\n            <div className=\"mt-4 flex items-center gap-6\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage src={user?.profileImageUrl || undefined} />\n                <AvatarFallback className=\"text-2xl\">\n                  {user?.firstName?.[0] || user?.email?.[0] || \"U\"}\n                </AvatarFallback>\n              </Avatar>\n              <SimpleUploader\n                onUploadComplete={handleProfileImageComplete}\n                accept=\"image/*\"\n                data-testid=\"button-upload-profile-image\"\n              >\n                <Upload className=\"mr-2 h-4 w-4\" />\n                Upload New Photo\n              </SimpleUploader>\n            </div>\n          </Card>\n\n          {user?.role === \"artist\" ? (\n            <>\n              <Card className=\"p-6\">\n                <h2 className=\"font-serif text-xl font-semibold\">\n                  Basic Information\n                </h2>\n                <div className=\"mt-6 space-y-4\">\n                  <div>\n                    <Label htmlFor=\"bio\">Bio</Label>\n                    <Textarea\n                      id=\"bio\"\n                      placeholder=\"Tell us about yourself...\"\n                      value={bio}\n                      onChange={(e) => setBio(e.target.value)}\n                      className=\"mt-2\"\n                      rows={4}\n                      data-testid=\"input-bio\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"location\">Location</Label>\n                    <Input\n                      id=\"location\"\n                      placeholder=\"e.g., Los Angeles, CA\"\n                      value={location}\n                      onChange={(e) => setLocationField(e.target.value)}\n                      className=\"mt-2\"\n                      data-testid=\"input-location\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"website\">Website</Label>\n                    <Input\n                      id=\"website\"\n                      type=\"url\"\n                      placeholder=\"https://your-website.com\"\n                      value={website}\n                      onChange={(e) => setWebsite(e.target.value)}\n                      className=\"mt-2\"\n                      data-testid=\"input-website\"\n                    />\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <h2 className=\"font-serif text-xl font-semibold\">Genres</h2>\n                <div className=\"mt-4\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {genres.map((genre) => (\n                      <Badge key={genre} variant=\"secondary\" className=\"gap-2\">\n                        {genre}\n                        <button\n                          onClick={() => removeGenre(genre)}\n                          className=\"hover-elevate rounded-sm\"\n                          data-testid={`button-remove-genre-${genre}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"mt-4 flex gap-2\">\n                    <Input\n                      placeholder=\"Add a genre\"\n                      value={newGenre}\n                      onChange={(e) => setNewGenre(e.target.value)}\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\") {\n                          e.preventDefault();\n                          addGenre(newGenre);\n                        }\n                      }}\n                      list=\"genres-list\"\n                      data-testid=\"input-new-genre\"\n                    />\n                    <datalist id=\"genres-list\">\n                      {COMMON_GENRES.map((g) => (\n                        <option key={g} value={g} />\n                      ))}\n                    </datalist>\n                    <Button onClick={() => addGenre(newGenre)} data-testid=\"button-add-genre\">\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <h2 className=\"font-serif text-xl font-semibold\">Skills</h2>\n                <div className=\"mt-4\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {skills.map((skill) => (\n                      <Badge key={skill} variant=\"secondary\" className=\"gap-2\">\n                        {skill}\n                        <button\n                          onClick={() => removeSkill(skill)}\n                          className=\"hover-elevate rounded-sm\"\n                          data-testid={`button-remove-skill-${skill}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"mt-4 flex gap-2\">\n                    <Input\n                      placeholder=\"Add a skill\"\n                      value={newSkill}\n                      onChange={(e) => setNewSkill(e.target.value)}\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\") {\n                          e.preventDefault();\n                          addSkill(newSkill);\n                        }\n                      }}\n                      list=\"skills-list\"\n                      data-testid=\"input-new-skill\"\n                    />\n                    <datalist id=\"skills-list\">\n                      {COMMON_SKILLS.map((s) => (\n                        <option key={s} value={s} />\n                      ))}\n                    </datalist>\n                    <Button onClick={() => addSkill(newSkill)} data-testid=\"button-add-skill\">\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <h2 className=\"font-serif text-xl font-semibold\">\n                  Portfolio Samples\n                </h2>\n                <p className=\"mt-2 text-sm text-muted-foreground\">\n                  Upload samples of your work (images, audio, video)\n                </p>\n                <div className=\"mt-4 space-y-4\">\n                  {portfolioSamples.map((sample, idx) => (\n                    <div\n                      key={idx}\n                      className=\"flex items-center justify-between rounded-md border p-3\"\n                    >\n                      <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n                        <ExternalLink className=\"h-4 w-4 flex-shrink-0 text-muted-foreground\" />\n                        <span className=\"text-sm truncate\">Sample {idx + 1}</span>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removePortfolioSample(sample)}\n                        data-testid={`button-remove-portfolio-${idx}`}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                  <SimpleUploader\n                    onUploadComplete={handlePortfolioComplete}\n                    buttonClassName=\"w-full\"\n                    accept=\"image/*,video/*,audio/*\"\n                    data-testid=\"button-upload-portfolio\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add Portfolio Sample\n                  </SimpleUploader>\n                </div>\n              </Card>\n            </>\n          ) : (\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold\">\n                Label Information\n              </h2>\n              <div className=\"mt-6 space-y-4\">\n                <div>\n                  <Label htmlFor=\"companyName\">Company Name *</Label>\n                  <Input\n                    id=\"companyName\"\n                    placeholder=\"Your company name\"\n                    value={companyName}\n                    onChange={(e) => setCompanyName(e.target.value)}\n                    className=\"mt-2\"\n                    required\n                    data-testid=\"input-company-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"about\">About</Label>\n                  <Textarea\n                    id=\"about\"\n                    placeholder=\"Tell us about your label...\"\n                    value={about}\n                    onChange={(e) => setAbout(e.target.value)}\n                    className=\"mt-2\"\n                    rows={4}\n                    data-testid=\"input-about\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"location\">Location</Label>\n                  <Input\n                    id=\"location\"\n                    placeholder=\"e.g., New York, NY\"\n                    value={location}\n                    onChange={(e) => setLocationField(e.target.value)}\n                    className=\"mt-2\"\n                    data-testid=\"input-location\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"website\">Website</Label>\n                  <Input\n                    id=\"website\"\n                    type=\"url\"\n                    placeholder=\"https://your-website.com\"\n                    value={website}\n                    onChange={(e) => setWebsite(e.target.value)}\n                    className=\"mt-2\"\n                    data-testid=\"input-website\"\n                  />\n                </div>\n              </div>\n            </Card>\n          )}\n\n          <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" onClick={() => setLocation(\"/\")} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSave}\n              disabled={saveProfileMutation.isPending}\n              data-testid=\"button-save\"\n            >\n              {saveProfileMutation.isPending ? \"Saving...\" : \"Save Profile\"}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17413},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Signup from \"@/pages/signup\";\nimport Home from \"@/pages/home\";\nimport Discover from \"@/pages/discover\";\nimport Profile from \"@/pages/profile\";\nimport OpportunityForm from \"@/pages/opportunity-form\";\nimport ProjectForm from \"@/pages/project-form\";\nimport OpportunityDetail from \"@/pages/opportunity-detail\";\nimport ProjectDetail from \"@/pages/project-detail\";\nimport ArtistDetail from \"@/pages/artist-detail\";\nimport Applications from \"@/pages/applications\";\nimport Messages from \"@/pages/messages\";\nimport Settings from \"@/pages/settings\";\nimport Analytics from \"@/pages/analytics\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </>\n      ) : !user?.role ? (\n        <>\n          <Route path=\"/\" component={Signup} />\n          <Route path=\"*\">\n            <Redirect to=\"/\" />\n          </Route>\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/discover\" component={Discover} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/opportunities/new\" component={OpportunityForm} />\n          <Route path=\"/opportunities/:id\" component={OpportunityDetail} />\n          <Route path=\"/projects/new\" component={ProjectForm} />\n          <Route path=\"/projects/:id\" component={ProjectDetail} />\n          <Route path=\"/artists/:id\" component={ArtistDetail} />\n          <Route path=\"/applications\" component={Applications} />\n          <Route path=\"/messages\" component={Messages} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/analytics\" component={Analytics} />\n          <Route component={NotFound} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":2873},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/SimpleUploader.tsx":{"content":"import { useState, useRef } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SimpleUploaderProps {\n  onUploadComplete?: (url: string) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n  accept?: string;\n  \"data-testid\"?: string;\n}\n\nexport function SimpleUploader({\n  onUploadComplete,\n  buttonClassName,\n  children,\n  accept = \"image/*\",\n  \"data-testid\": dataTestId,\n}: SimpleUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    setIsUploading(true);\n    try {\n      // Get upload URL\n      const uploadResponse = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error(\"Failed to get upload URL\");\n      }\n\n      const { uploadURL } = await uploadResponse.json();\n\n      // Upload file\n      const uploadResult = await fetch(uploadURL, {\n        method: \"PUT\",\n        body: file,\n        headers: {\n          \"Content-Type\": file.type,\n        },\n      });\n\n      if (!uploadResult.ok) {\n        throw new Error(\"Failed to upload file\");\n      }\n\n      // Extract object path from upload URL\n      const url = new URL(uploadURL);\n      const objectPath = url.pathname;\n\n      toast({\n        title: \"Upload successful\",\n        description: \"File has been uploaded successfully\",\n      });\n\n      onUploadComplete?.(objectPath);\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload file. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n    }\n  };\n\n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept={accept}\n        onChange={handleFileSelect}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        onClick={() => fileInputRef.current?.click()}\n        disabled={isUploading}\n        className={buttonClassName}\n        data-testid={dataTestId}\n      >\n        {isUploading ? \"Uploading...\" : children}\n      </Button>\n    </>\n  );\n}\n","size_bytes":2523},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 240 5% 96%;\n\n  --foreground: 240 6% 10%;\n\n  --border: 240 5% 88%;\n\n  --card: 240 5% 94%;\n\n  --card-foreground: 240 6% 12%;\n\n  --card-border: 240 5% 86%;\n\n  --sidebar: 240 5% 92%;\n\n  --sidebar-foreground: 240 6% 14%;\n\n  --sidebar-border: 240 5% 84%;\n\n  --sidebar-primary: 262 83% 58%;\n\n  --sidebar-primary-foreground: 262 10% 98%;\n\n  --sidebar-accent: 240 8% 88%;\n\n  --sidebar-accent-foreground: 240 6% 16%;\n\n  --sidebar-ring: 262 83% 58%;\n\n  --popover: 240 5% 90%;\n\n  --popover-foreground: 240 6% 14%;\n\n  --popover-border: 240 5% 82%;\n\n  --primary: 262 83% 58%;\n\n  --primary-foreground: 262 10% 98%;\n\n  --secondary: 240 8% 86%;\n\n  --secondary-foreground: 240 6% 16%;\n\n  --muted: 240 10% 90%;\n\n  --muted-foreground: 240 6% 38%;\n\n  --accent: 240 12% 88%;\n\n  --accent-foreground: 240 6% 16%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 240 6% 76%;\n  --ring: 262 83% 58%;\n  --chart-1: 262 83% 48%;\n  --chart-2: 330 84% 52%;\n  --chart-3: 200 90% 42%;\n  --chart-4: 40 96% 48%;\n  --chart-5: 160 84% 38%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  --font-serif: 'Space Grotesk', Georgia, serif;\n  --font-mono: Menlo, Monaco, 'Courier New', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 5% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 5% 10% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(240 5% 10% / 0.06), 0px 1px 2px -1px hsl(240 5% 10% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(240 5% 10% / 0.08), 0px 2px 4px -2px hsl(240 5% 10% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(240 5% 10% / 0.10), 0px 3px 6px -3px hsl(240 5% 10% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(240 5% 10% / 0.12), 0px 4px 8px -4px hsl(240 5% 10% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(240 5% 10% / 0.15), 0px 8px 12px -6px hsl(240 5% 10% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 5% 10% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 6% 8%;\n\n  --foreground: 240 5% 92%;\n\n  --border: 240 5% 16%;\n\n  --card: 240 5% 10%;\n\n  --card-foreground: 240 5% 90%;\n\n  --card-border: 240 5% 18%;\n\n  --sidebar: 240 5% 12%;\n\n  --sidebar-foreground: 240 5% 88%;\n\n  --sidebar-border: 240 5% 20%;\n\n  --sidebar-primary: 262 80% 62%;\n\n  --sidebar-primary-foreground: 262 8% 98%;\n\n  --sidebar-accent: 240 8% 16%;\n\n  --sidebar-accent-foreground: 240 5% 88%;\n\n  --sidebar-ring: 262 80% 62%;\n\n  --popover: 240 5% 14%;\n\n  --popover-foreground: 240 5% 88%;\n\n  --popover-border: 240 5% 22%;\n\n  --primary: 262 80% 62%;\n\n  --primary-foreground: 262 8% 98%;\n\n  --secondary: 240 8% 18%;\n\n  --secondary-foreground: 240 5% 88%;\n\n  --muted: 240 10% 14%;\n\n  --muted-foreground: 240 5% 65%;\n\n  --accent: 240 12% 16%;\n\n  --accent-foreground: 240 5% 88%;\n\n  --destructive: 0 80% 52%;\n\n  --destructive-foreground: 0 8% 98%;\n\n  --input: 240 6% 28%;\n  --ring: 262 80% 62%;\n  --chart-1: 262 90% 68%;\n  --chart-2: 330 90% 70%;\n  --chart-3: 200 95% 65%;\n  --chart-4: 40 98% 68%;\n  --chart-5: 160 88% 58%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 10% 2% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 10% 2% / 0.30);\n  --shadow-sm: 0px 2px 4px -1px hsl(240 10% 2% / 0.25), 0px 1px 2px -1px hsl(240 10% 2% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(240 10% 2% / 0.30), 0px 2px 4px -2px hsl(240 10% 2% / 0.25);\n  --shadow-md: 0px 6px 12px -2px hsl(240 10% 2% / 0.35), 0px 3px 6px -3px hsl(240 10% 2% / 0.30);\n  --shadow-lg: 0px 10px 20px -4px hsl(240 10% 2% / 0.40), 0px 4px 8px -4px hsl(240 10% 2% / 0.35);\n  --shadow-xl: 0px 20px 30px -6px hsl(240 10% 2% / 0.45), 0px 8px 12px -6px hsl(240 10% 2% / 0.40);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 10% 2% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10004},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\nexport class ObjectStorageService {\n  constructor() {}\n\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      console.warn(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. File viewing may not work. \" +\n          \"Create a bucket in 'Object Storage' tool and set PUBLIC_OBJECT_SEARCH_PATHS env var.\"\n      );\n      return [];\n    }\n    return paths;\n  }\n\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      console.warn(\n        \"PRIVATE_OBJECT_DIR not set. File uploads may not work. \" +\n          \"Create a bucket in 'Object Storage' tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n      return \"\";\n    }\n    return dir;\n  }\n\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n    return null;\n  }\n\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      const [metadata] = await file.getMetadata();\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      const stream = file.createReadStream();\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n\n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n\n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":7465},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"replit.md":{"content":"# COLZ - Creative Collaboration Platform\n\n## Overview\n\nCOLZ is a mobile-first web application that connects artists and record labels for creative collaboration. Artists can showcase their portfolios, discover collaboration opportunities posted by labels, and apply to projects. Labels can post opportunities, browse artist profiles, and manage applications. The platform emphasizes visual presentation of creative work with a clean, modern interface inspired by Behance, LinkedIn, and Upwork.\n\n**Core User Flows:**\n- Artists: Create profiles with portfolios, discover and apply to opportunities, showcase projects\n- Labels: Create company profiles, post collaboration opportunities, review applications\n- Both roles: Search and filter content, manage profiles with media uploads\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System:**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server for fast HMR and optimized production builds\n- Wouter for lightweight client-side routing (replaces heavier React Router)\n- TanStack Query (React Query) for server state management, caching, and automatic refetching\n\n**UI Component Library:**\n- shadcn/ui components built on Radix UI primitives (40+ pre-built accessible components)\n- Tailwind CSS for utility-first styling with custom design tokens\n- Design system follows \"new-york\" style variant with neutral color palette\n- Typography: Inter (UI/body) and Space Grotesk (headings/display) from Google Fonts\n- Custom CSS variables for theming with light/dark mode support\n\n**State Management Strategy:**\n- Server state managed entirely through React Query with query invalidation patterns\n- Local UI state kept in component-level useState/useReducer\n- No global state management library (Redux/Zustand) - server state suffices for this application\n- Authentication state derived from `/api/auth/user` query\n\n**File Upload Handling:**\n- Dual upload system: Uppy.js with AWS S3 integration for complex multi-file uploads\n- SimpleUploader component for single-file uploads (profile images)\n- Google Cloud Storage backend via Replit's sidecar service\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js REST API with TypeScript\n- Session-based authentication using Replit Auth (OpenID Connect)\n- express-session with PostgreSQL session store for persistent sessions\n- Custom middleware for request logging and error handling\n\n**API Design Pattern:**\n- RESTful endpoints organized by resource type (users, profiles, opportunities, projects, applications)\n- Authentication middleware (`isAuthenticated`) protecting all non-public routes\n- Consistent error responses with HTTP status codes\n- Request/response logging with JSON body capture for debugging\n\n**Database Layer:**\n- Drizzle ORM for type-safe database operations with PostgreSQL\n- Neon serverless PostgreSQL via WebSocket connection\n- Schema-first approach with Zod validation for runtime type checking\n- Relations defined between users, profiles, opportunities, and applications\n\n**Database Schema Design:**\n```\nusers (id, email, firstName, lastName, profileImageUrl, role)\n  ├── artistProfiles (userId FK, bio, location, genres[], skills[], socialLinks)\n  ├── labelProfiles (userId FK, companyName, bio, website, logoUrl)\n  ├── projects (artistId FK, title, description, genres[], mediaUrls[], mediaType, mediaDuration)\n  ├── opportunities (labelId FK, title, description, genres[], skills[], compensation, deadline, status)\n  ├── applications (opportunityId FK, artistId FK, coverLetter, status)\n  ├── conversations (user1Id FK, user2Id FK, lastMessageAt)\n  ├── messages (conversationId FK, senderId FK, content, read)\n  ├── notifications (userId FK, type, title, message, link, read)\n  └── userPreferences (userId FK, emailNotifications, applicationNotifications, messageNotifications, opportunityNotifications, profileVisibility)\nsessions (sid PK, sess JSONB, expire) - for Replit Auth\n```\n\n**Authentication Flow:**\n- Replit Auth handles OAuth flow with session creation\n- Sessions stored in PostgreSQL with 7-day TTL\n- User object attached to request via Passport.js strategy\n- Role-based access control via user.role field (artist/label)\n\n**Object Storage Architecture:**\n- Google Cloud Storage integration via Replit sidecar service\n- Custom ACL (Access Control List) system for object permissions\n- Public/private visibility with owner-based access control\n- Presigned upload URLs for direct client-to-storage uploads\n\n### External Dependencies\n\n**Third-Party Services:**\n- **Replit Auth**: OpenID Connect authentication provider for user login/signup\n- **Neon Database**: Serverless PostgreSQL hosting with WebSocket connections\n- **Google Cloud Storage**: Object storage for media files (images, audio, video) via Replit's sidecar\n- **Google Fonts**: CDN delivery of Inter and Space Grotesk typefaces\n\n**NPM Package Ecosystem:**\n- **UI Components**: @radix-ui/* primitives (20+ packages for accessible components)\n- **Forms**: react-hook-form with @hookform/resolvers for Zod schema validation\n- **File Uploads**: Uppy ecosystem (@uppy/core, @uppy/aws-s3, @uppy/dashboard, @uppy/react)\n- **Database**: drizzle-orm, @neondatabase/serverless, drizzle-zod for schema validation\n- **Authentication**: openid-client, passport, express-session, connect-pg-simple\n- **Styling**: tailwindcss, autoprefixer, class-variance-authority, clsx, tailwind-merge\n\n**Development Tools:**\n- TypeScript compiler with path aliases (@/, @shared/, @assets/)\n- Vite plugins: @vitejs/plugin-react, Replit-specific plugins for error overlay and dev banner\n- esbuild for backend bundling in production builds\n\n**Build & Deployment:**\n- Development: Vite dev server with Express API proxy\n- Production: Static frontend built to dist/public, backend bundled with esbuild\n- Environment variables: DATABASE_URL, SESSION_SECRET, REPLIT_DOMAINS, ISSUER_URL, PUBLIC_OBJECT_SEARCH_PATHS\n\n## Recent Changes (October 2025)\n\n### Completed Features\n\n1. **Real-time Messaging System**\n   - REST API for conversations and messages\n   - Conversation list and message thread views\n   - Real-time message delivery (no WebSocket - using REST polling)\n   - Authorization: only conversation participants can access messages\n   - Endpoints: GET/POST /api/conversations, GET/POST /api/messages, PATCH /api/messages/:id/read\n\n2. **Notification Center**\n   - NotificationBell component with dropdown UI\n   - Unread count badge\n   - Notification triggers for: application submissions, acceptances, rejections, new messages\n   - Mark as read functionality (individual and bulk)\n   - Endpoints: GET /api/notifications, POST /api/notifications/mark-read, POST /api/notifications/mark-all-read\n\n3. **Advanced Portfolio Management**\n   - Extended projects schema with mediaType (image/audio/video) and mediaDuration fields\n   - MediaPlayer components for audio/video playback with controls\n   - ProjectMediaDisplay for conditional rendering based on media type\n   - Automatic media type detection on upload\n\n4. **User Settings**\n   - Settings page with three tabs: Account, Notifications, Privacy\n   - Account tab: edit name, upload profile image\n   - Notifications tab: toggle email/application/message/opportunity notifications\n   - Privacy tab: set profile visibility (public/private/connections)\n   - Endpoints: PATCH /api/auth/user, GET/POST /api/preferences\n\n5. **Analytics Dashboard (Labels Only)**\n   - Opportunity performance metrics with aggregated application counts\n   - Application status breakdown (pending/accepted/rejected)\n   - Acceptance rate calculations per opportunity\n   - Data visualization using Recharts (bar charts, pie charts)\n   - Detailed metrics table showing per-opportunity statistics\n   - Endpoints: GET /api/analytics/opportunities, GET /api/analytics/application-breakdown\n   - Navigation: Analytics link visible only to label users\n\n### Bug Fixes (October 24, 2025)\n\n1. **Discover Page Filter Bug**\n   - Fixed SelectItem components with empty string values causing errors\n   - Changed filter default values from \"\" to \"all\"\n   - Updated filter logic to properly handle \"all\" as the reset value\n   - Files: client/src/pages/discover.tsx\n\n2. **Opportunity Creation Deadline Bug**\n   - Added date string to Date object conversion in POST /api/opportunities route\n   - Properly handles optional deadline field (converts to Date or null)\n   - Prevents database insertion errors for date fields\n   - Files: server/routes.ts\n\n3. **Opportunity Creation Redirect Bug**\n   - Fixed redirect after opportunity creation to navigate to detail page\n   - Changed from redirecting to \"/\" (causing 404) to \"/opportunities/:id\"\n   - Captures returned opportunity ID from API response\n   - Fallback to /discover if ID is not returned\n   - Files: client/src/pages/opportunity-form.tsx\n\n4. **Deployment Server Initialization Bug**\n   - Removed unsupported `reusePort: true` option from server.listen()\n   - Added comprehensive try-catch error handling for server initialization\n   - Changed to standard `listen(port, host, callback)` format for Cloud Run/Autoscale compatibility\n   - Files: server/index.ts\n\n5. **Missing Project Detail Page (404 Error)**\n   - Created ProjectDetail component for displaying individual project pages\n   - Added route `/projects/:id` to App.tsx router configuration\n   - Displays project media, artist information, description, genres, and duration\n   - Backend endpoint GET /api/projects/:id already existed\n   - Files: client/src/pages/project-detail.tsx, client/src/App.tsx\n\n6. **Home Page Content Duplication (October 24, 2025)**\n   - Fixed routing issue where Landing component was rendering twice\n   - Changed catch-all routes from `<Route component={Landing} />` to proper redirects\n   - Unauthenticated users now redirect to landing page instead of seeing 404s\n   - Files: client/src/App.tsx\n\n7. **Missing Artist Detail Page (October 24, 2025)**\n   - Created ArtistDetail component for viewing artist profiles\n   - Added backend routes: GET /api/artists/:id and GET /api/artists/:id/projects\n   - Added route `/artists/:id` to App.tsx router configuration\n   - Displays artist bio, skills, genres, website, and all their projects\n   - Users can now click on artist cards in Discover page to view full profiles\n   - Files: client/src/pages/artist-detail.tsx, client/src/App.tsx, server/routes.ts\n\n8. **Improved Signup Flow (October 24, 2025)**\n   - Created new Signup component with two-step onboarding process\n   - Step 1: Users enter their first name and last name\n   - Step 2: Users select their role (artist or label)\n   - Replaced RoleSelection with Signup in App.tsx routing\n   - Better user experience with personalized greeting\n   - Files: client/src/pages/signup.tsx, client/src/App.tsx\n\n9. **Consistent Navigation with AppHeader Component (October 24, 2025)**\n   - Created reusable AppHeader component providing consistent navigation across all pages\n   - Role-based navigation links (artist vs label specific menu items)\n   - Active route highlighting based on current location\n   - Mobile-responsive menu with hamburger icon\n   - Mobile menu auto-closes after link selection for better UX\n   - Integrated NotificationBell component in header\n   - Replaced individual headers in Home, Messages, and all other pages\n   - Files: client/src/components/AppHeader.tsx, client/src/pages/home.tsx, client/src/pages/messages.tsx\n\n10. **Authentication UI Improvements (October 24, 2025)**\n    - Added dedicated Authentication card in Settings page\n    - Displays current login status with user email\n    - Logout button with redirect to landing page\n    - Login button for unauthenticated users\n    - Clear visual separation from other settings sections\n    - Files: client/src/pages/settings.tsx\n\n11. **Artist Profile Messaging Integration (October 24, 2025)**\n    - Added \"Message\" button on artist detail pages\n    - Button hidden when viewing own profile\n    - Automatically creates or retrieves existing conversation with artist\n    - Navigates to Messages page with conversation pre-selected\n    - Integrates with existing messaging system\n    - Files: client/src/pages/artist-detail.tsx\n\n12. **Artist Routing Fix (October 24, 2025)**\n    - Fixed critical routing bug where artist detail pages used profile IDs instead of user IDs\n    - Updated all artist card links to use `artist.userId` instead of `artist.id`\n    - Modified backend route `/api/artists/:id` to accept user ID and call `getArtistProfile(userId)`\n    - Ensures consistent ID usage across discover, home, and profile pages\n    - Prevents 404 errors when navigating to artist profiles\n    - Files: client/src/pages/discover.tsx, client/src/pages/home.tsx, server/routes.ts","size_bytes":12875},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Music, Users, Briefcase, Search, TrendingUp, MessageSquare } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"sticky top-0 z-50 border-b bg-background/95 backdrop-blur\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Music className=\"h-8 w-8 text-primary\" />\n              <span className=\"font-serif text-2xl font-bold\">COLZ</span>\n            </div>\n            <Button asChild data-testid=\"button-login\">\n              <a href=\"/api/login\">Sign In</a>\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main>\n        <section className=\"relative overflow-hidden py-20 sm:py-32\">\n          <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n            <div className=\"mx-auto max-w-3xl text-center\">\n              <h1 className=\"font-serif text-4xl font-bold tracking-tight sm:text-6xl md:text-7xl\">\n                Connect. Collaborate. Create.\n              </h1>\n              <p className=\"mt-6 text-lg leading-relaxed text-muted-foreground sm:text-xl\">\n                COLZ is the platform where artists and labels discover opportunities, \n                showcase their work, and build meaningful creative partnerships.\n              </p>\n              <div className=\"mt-10 flex flex-wrap items-center justify-center gap-4\">\n                <Button size=\"lg\" asChild data-testid=\"button-get-started\">\n                  <a href=\"/api/login\">Get Started</a>\n                </Button>\n                <Button size=\"lg\" variant=\"outline\" asChild data-testid=\"button-learn-more\">\n                  <a href=\"#features\">Learn More</a>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section id=\"features\" className=\"py-16 sm:py-20\">\n          <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n            <div className=\"mx-auto max-w-2xl text-center\">\n              <h2 className=\"font-serif text-3xl font-semibold sm:text-4xl\">\n                Everything you need to collaborate\n              </h2>\n              <p className=\"mt-4 text-lg text-muted-foreground\">\n                Powerful tools designed for the creative community\n              </p>\n            </div>\n\n            <div className=\"mt-12 grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n              <Card className=\"p-6\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                  <Users className=\"h-6 w-6 text-primary\" />\n                </div>\n                <h3 className=\"mt-4 font-serif text-xl font-semibold\">\n                  Artist Profiles\n                </h3>\n                <p className=\"mt-2 text-sm leading-relaxed text-muted-foreground\">\n                  Showcase your skills, portfolio, and unique creative voice. \n                  Let your work speak for itself.\n                </p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                  <Briefcase className=\"h-6 w-6 text-primary\" />\n                </div>\n                <h3 className=\"mt-4 font-serif text-xl font-semibold\">\n                  Opportunities\n                </h3>\n                <p className=\"mt-2 text-sm leading-relaxed text-muted-foreground\">\n                  Discover collaboration opportunities from labels and fellow artists. \n                  Find your next big project.\n                </p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                  <Search className=\"h-6 w-6 text-primary\" />\n                </div>\n                <h3 className=\"mt-4 font-serif text-xl font-semibold\">\n                  Smart Discovery\n                </h3>\n                <p className=\"mt-2 text-sm leading-relaxed text-muted-foreground\">\n                  Advanced filters help you find exactly what you're looking for. \n                  Genre, skills, location, and more.\n                </p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                  <TrendingUp className=\"h-6 w-6 text-primary\" />\n                </div>\n                <h3 className=\"mt-4 font-serif text-xl font-semibold\">\n                  Project Showcase\n                </h3>\n                <p className=\"mt-2 text-sm leading-relaxed text-muted-foreground\">\n                  Share your creative projects with the community. \n                  Build your reputation and attract opportunities.\n                </p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                  <MessageSquare className=\"h-6 w-6 text-primary\" />\n                </div>\n                <h3 className=\"mt-4 font-serif text-xl font-semibold\">\n                  Easy Applications\n                </h3>\n                <p className=\"mt-2 text-sm leading-relaxed text-muted-foreground\">\n                  Apply to opportunities with ease. Track your applications \n                  and manage responses all in one place.\n                </p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                  <Music className=\"h-6 w-6 text-primary\" />\n                </div>\n                <h3 className=\"mt-4 font-serif text-xl font-semibold\">\n                  For Artists & Labels\n                </h3>\n                <p className=\"mt-2 text-sm leading-relaxed text-muted-foreground\">\n                  Whether you're an artist or a label, COLZ provides the tools \n                  to connect and grow together.\n                </p>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"border-t py-16 sm:py-20\">\n          <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n            <div className=\"mx-auto max-w-2xl text-center\">\n              <h2 className=\"font-serif text-3xl font-semibold sm:text-4xl\">\n                Ready to start collaborating?\n              </h2>\n              <p className=\"mt-4 text-lg text-muted-foreground\">\n                Join COLZ today and connect with the creative community.\n              </p>\n              <div className=\"mt-8\">\n                <Button size=\"lg\" asChild data-testid=\"button-join-now\">\n                  <a href=\"/api/login\">Join Now</a>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <footer className=\"border-t py-8\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <p className=\"text-center text-sm text-muted-foreground\">\n            © 2024 COLZ. Connect. Collaborate. Create.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":7398},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"design_guidelines.md":{"content":"# COLZ Design Guidelines\n\n## Design Approach\n\n**Reference-Based Approach**: Drawing inspiration from creative professional platforms like Behance (portfolio showcase), LinkedIn (professional networking), and Upwork (opportunity marketplace). The design emphasizes visual content while maintaining professional credibility for creative collaboration.\n\n**Core Principle**: Elevate artist work as the hero element while enabling seamless discovery and connection.\n\n---\n\n## Typography\n\n**Font Stack**: \n- Primary: Inter (Google Fonts) - all UI elements, body text\n- Display: Space Grotesk (Google Fonts) - headings, artist names, opportunity titles\n\n**Hierarchy**:\n- Hero/Profile Names: text-4xl md:text-5xl font-bold (Space Grotesk)\n- Section Headers: text-2xl md:text-3xl font-semibold (Space Grotesk)\n- Opportunity/Project Titles: text-xl font-semibold (Space Grotesk)\n- Body Text: text-base leading-relaxed (Inter)\n- Card Metadata: text-sm font-medium (Inter)\n- Helper Text: text-xs (Inter)\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16, 20 consistently\n- Component padding: p-4 to p-6\n- Section spacing: py-12 md:py-16\n- Card gaps: gap-6 md:gap-8\n- Element margins: mb-4, mb-6, mb-8\n\n**Grid System**:\n- Max container: max-w-7xl mx-auto px-4\n- Opportunity/Artist Cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\n- Profile Content: Single column max-w-4xl for readability\n- Search Results: grid-cols-1 lg:grid-cols-2 gap-8\n\n---\n\n## Component Library\n\n### Navigation\n**Top Navigation Bar**: Sticky header with logo left, search center, user avatar/notifications right. Height: h-16. Include quick role indicator (Artist/Label badge).\n\n**Bottom Tab Bar** (Mobile): Fixed bottom navigation with 5 tabs - Home, Discover, Create, Messages, Profile. Icons from Heroicons, active state with icon fill and subtle indicator.\n\n### Cards\n\n**Artist Profile Card**: \n- Aspect ratio card with profile image background (overlay gradient)\n- Avatar positioned bottom-left with online status indicator\n- Name, primary genre, location overlay on image\n- Skill tags below image\n- Stats row: projects, collaborations, rating\n- CTA: \"View Profile\" + \"Message\" buttons\n\n**Opportunity Card**:\n- Header: Label logo + name + verified badge\n- Title (bold, prominent)\n- Compensation + deadline badges\n- 2-3 line description preview\n- Required skills as tags (max 4 visible)\n- Footer: applicant count + posted date\n- CTA: \"View Details\" prominent button\n\n**Project Showcase Card**:\n- Large media preview (audio/video thumbnail with play icon overlay)\n- Project title + artist name\n- Collaboration count + genre tags\n- Engagement stats: plays, likes, shares\n\n### Forms\n\n**Input Fields**: \n- Border-2 with rounded-lg\n- Floating labels that animate on focus\n- Clear visual feedback states (focus ring, error border)\n- Icon prefix for search/email fields (Heroicons)\n- Helper text below in muted styling\n\n**Multi-Select Tags**: Pill-style with x-close, max-w-fit inline-flex, animated add/remove\n\n**File Upload**: \n- Drag-and-drop zone with dashed border\n- Preview thumbnails for uploaded media\n- Progress indicators for uploads\n\n### Profile Sections\n\n**Artist Profile**:\n- Hero: Full-width cover image (16:9 aspect) with gradient overlay\n- Floating avatar (large, border-4 solid with offset from cover)\n- Bio section: max-w-3xl centered\n- Portfolio Grid: Masonry-style media gallery (audio/video players)\n- Skills & Genres: Tag cloud layout\n- Social Links: Icon buttons row\n- Stats Dashboard: 4-column grid on desktop\n\n**Label Profile**:\n- Professional header with logo prominent\n- About section with company info\n- Active Opportunities grid\n- Featured Artists carousel\n- Contact information card\n\n### Discovery & Search\n\n**Search Interface**:\n- Prominent search bar with filters dropdown\n- Filter sidebar (desktop) / bottom sheet (mobile)\n- Faceted filters: Genre, Location, Skill Level, Availability\n- Applied filters shown as removable pills\n- Sort options: Relevance, Recent, Rating\n\n**Feed Layout**:\n- Mixed content: opportunities, artist highlights, projects\n- Infinite scroll with loading states\n- \"Recommended for you\" section header\n- Clear visual separation between content types\n\n### Messaging\n\n**Chat List**:\n- Avatar + name + last message preview\n- Timestamp right-aligned\n- Unread count badge\n- Online status indicator\n- Search/filter at top\n\n**Chat Interface**:\n- Header: contact info + options menu\n- Message bubbles: sender right, receiver left, rounded-2xl\n- Timestamp groups\n- Media message previews\n- Input bar: text field + attachment + send icons\n- Typing indicator animation\n\n### Modals & Overlays\n\n**Opportunity Details Modal**: \n- Full-screen on mobile, centered lg:max-w-3xl on desktop\n- Scrollable content area\n- Sticky header with close button\n- Sticky footer with primary CTA\n\n**Application Form Modal**: \n- Multi-step if needed with progress indicator\n- Form sections with clear headers\n- File attachment area\n- Submit button prominent at bottom\n\n**Filters Panel**: \n- Slide-in from right (desktop) / bottom (mobile)\n- Section headers for filter groups\n- Checkbox/radio groups\n- Range sliders for numerical filters\n- Apply/Reset buttons sticky at bottom\n\n---\n\n## Animations\n\n**Micro-interactions Only**:\n- Card hover: subtle scale (1.02) + shadow elevation\n- Button press: scale(0.98) feedback\n- Tab switching: smooth cross-fade\n- Modal enter/exit: slide + fade\n- Loading states: skeleton screens (shimmer effect)\n\n**No** scroll-triggered animations, parallax, or decorative motion.\n\n---\n\n## Images\n\n**Hero Sections**: No traditional hero. Lead with content.\n\n**Profile Images Required**:\n- Artist cover images: 1600x900px minimum, dramatic/creative\n- Artist avatars: 400x400px, circular crop\n- Label logos: 200x200px, square/circular\n- Project thumbnails: 800x800px for audio, 16:9 for video\n\n**Opportunity Imagery**: Label logo + optional cover image for premium opportunities\n\n**Placeholder Strategy**: Use gradient backgrounds + initials for missing avatars, abstract patterns for missing covers.\n\n---\n\n## Key Screens Layout\n\n**Home/Feed**: Full-width feed layout, opportunity cards + artist spotlights mixed, filters sticky on desktop sidebar\n\n**Discover Artists**: Grid layout, filter sidebar, prominent search\n\n**Discover Opportunities**: List/grid toggle, rich filtering, sort options\n\n**Create Opportunity/Project**: Form-focused single column, max-w-2xl, clear section breaks\n\n**Profile View**: Cover + avatar hero, tabbed content (About, Portfolio, Stats, Reviews)\n\n**Messages**: Split view on desktop (list + conversation), stacked on mobile\n\n---\n\n**Mobile-First Mandate**: All layouts stack to single column below md: breakpoint. Touch targets minimum 44px. Bottom navigation on mobile replaces top nav secondary items.","size_bytes":6778},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      res.status(status).json({ message });\n      throw err;\n    });\n\n    // importantly only setup vite in development and after\n    // setting up all the other routes so the catch-all route\n    // doesn't interfere with the other routes\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // ALWAYS serve the app on the port specified in the environment variable PORT\n    // Other ports are firewalled. Default to 5000 if not specified.\n    // this serves both the API and the client.\n    // It is the only port that is not firewalled.\n    const port = parseInt(process.env.PORT || '5000', 10);\n    server.listen(port, \"0.0.0.0\", () => {\n      log(`serving on port ${port}`);\n    });\n  } catch (error) {\n    console.error(\"Failed to initialize server:\", error);\n    process.exit(1);\n  }\n})();\n","size_bytes":2325},"client/src/pages/opportunity-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport {\n  ArrowLeft,\n  Building2,\n  Calendar,\n  DollarSign,\n  Send,\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Opportunity } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function OpportunityDetail() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, params] = useRoute(\"/opportunities/:id\");\n  const [, setLocation] = useLocation();\n  const [coverLetter, setCoverLetter] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const { data: opportunity, isLoading } = useQuery<\n    Opportunity & { label: { companyName: string; logoUrl: string | null; website: string | null } }\n  >({\n    queryKey: [\"/api/opportunities\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  const applyMutation = useMutation({\n    mutationFn: async (data: { coverLetter: string }) => {\n      return await apiRequest(\"POST\", `/api/opportunities/${params?.id}/apply`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/opportunities\", params?.id] });\n      toast({\n        title: \"Success\",\n        description: \"Application submitted successfully\",\n      });\n      setIsDialogOpen(false);\n      setCoverLetter(\"\");\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApply = () => {\n    applyMutation.mutate({ coverLetter });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8\">\n          <Skeleton className=\"h-12 w-1/2\" />\n          <Skeleton className=\"mt-4 h-24 w-full\" />\n          <Skeleton className=\"mt-4 h-64 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!opportunity) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"p-12 text-center\">\n          <p className=\"text-muted-foreground\">Opportunity not found</p>\n          <Button className=\"mt-4\" onClick={() => setLocation(\"/\")}>\n            Back to Home\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation(\"/discover\")} data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"flex-1 min-w-0\">\n              <h1 className=\"font-serif text-2xl font-bold sm:text-3xl line-clamp-1\">\n                {opportunity.title}\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                {opportunity.label.companyName}\n              </p>\n            </div>\n            {user?.role === \"artist\" && (\n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-apply\">\n                    <Send className=\"mr-2 h-4 w-4\" />\n                    Apply\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Apply to Opportunity</DialogTitle>\n                    <DialogDescription>\n                      Submit your application for this opportunity\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"coverLetter\">Cover Letter</Label>\n                      <Textarea\n                        id=\"coverLetter\"\n                        placeholder=\"Tell them why you're a great fit...\"\n                        value={coverLetter}\n                        onChange={(e) => setCoverLetter(e.target.value)}\n                        rows={6}\n                        className=\"mt-2\"\n                        data-testid=\"input-cover-letter\"\n                      />\n                    </div>\n                    <div className=\"flex justify-end gap-2\">\n                      <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)} data-testid=\"button-cancel-apply\">\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={handleApply}\n                        disabled={applyMutation.isPending}\n                        data-testid=\"button-submit-application\"\n                      >\n                        {applyMutation.isPending ? \"Submitting...\" : \"Submit Application\"}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8\">\n        <div className=\"space-y-6\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-start gap-6\">\n              <div className=\"flex h-16 w-16 flex-shrink-0 items-center justify-center rounded-md bg-card\">\n                {opportunity.label.logoUrl ? (\n                  <img\n                    src={opportunity.label.logoUrl}\n                    alt={opportunity.label.companyName}\n                    className=\"h-full w-full rounded-md object-cover\"\n                  />\n                ) : (\n                  <Building2 className=\"h-8 w-8 text-muted-foreground\" />\n                )}\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <h2 className=\"font-serif text-2xl font-semibold\">\n                  {opportunity.label.companyName}\n                </h2>\n                {opportunity.label.website && (\n                  <a\n                    href={opportunity.label.website}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm text-primary hover:underline\"\n                  >\n                    Visit Website\n                  </a>\n                )}\n                <div className=\"mt-4 flex flex-wrap gap-2\">\n                  <Badge variant=\"secondary\">{opportunity.status}</Badge>\n                  {opportunity.compensation && (\n                    <Badge variant=\"outline\" className=\"gap-2\">\n                      <DollarSign className=\"h-3 w-3\" />\n                      {opportunity.compensation}\n                    </Badge>\n                  )}\n                  {opportunity.deadline && (\n                    <Badge variant=\"outline\" className=\"gap-2\">\n                      <Calendar className=\"h-3 w-3\" />\n                      {new Date(opportunity.deadline).toLocaleDateString()}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <h3 className=\"font-serif text-xl font-semibold\">Description</h3>\n            <p className=\"mt-4 whitespace-pre-wrap leading-relaxed text-muted-foreground\">\n              {opportunity.description}\n            </p>\n          </Card>\n\n          {opportunity.requiredSkills.length > 0 && (\n            <Card className=\"p-6\">\n              <h3 className=\"font-serif text-xl font-semibold\">\n                Required Skills\n              </h3>\n              <div className=\"mt-4 flex flex-wrap gap-2\">\n                {opportunity.requiredSkills.map((skill, idx) => (\n                  <Badge key={idx} variant=\"secondary\">\n                    {skill}\n                  </Badge>\n                ))}\n              </div>\n            </Card>\n          )}\n\n          {opportunity.genres.length > 0 && (\n            <Card className=\"p-6\">\n              <h3 className=\"font-serif text-xl font-semibold\">Genres</h3>\n              <div className=\"mt-4 flex flex-wrap gap-2\">\n                {opportunity.genres.map((genre, idx) => (\n                  <Badge key={idx} variant=\"outline\">\n                    {genre}\n                  </Badge>\n                ))}\n              </div>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9380},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/project-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, X, Upload } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { SimpleUploader } from \"@/components/SimpleUploader\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nconst projectSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  collaborators: z.number().min(1).default(1),\n});\n\ntype ProjectFormData = z.infer<typeof projectSchema>;\n\nconst COMMON_GENRES = [\n  \"Pop\",\n  \"Rock\",\n  \"Hip Hop\",\n  \"Electronic\",\n  \"Jazz\",\n  \"Classical\",\n  \"R&B\",\n  \"Country\",\n];\n\nexport default function ProjectForm() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [genres, setGenres] = useState<string[]>([]);\n  const [newGenre, setNewGenre] = useState(\"\");\n  const [mediaUrl, setMediaUrl] = useState(\"\");\n  const [mediaType, setMediaType] = useState<string>(\"image\");\n  const [mediaDuration, setMediaDuration] = useState<number | undefined>();\n\n  const form = useForm<ProjectFormData>({\n    resolver: zodResolver(projectSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      collaborators: 1,\n    },\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: ProjectFormData & { genres: string[]; mediaUrl: string; mediaType: string; mediaDuration?: number }) => {\n      return await apiRequest(\"POST\", \"/api/projects\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Success\",\n        description: \"Project created successfully\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProjectFormData) => {\n    createProjectMutation.mutate({\n      ...data,\n      genres,\n      mediaUrl,\n      mediaType,\n      mediaDuration,\n    });\n  };\n\n  const addGenre = (genre: string) => {\n    if (genre && !genres.includes(genre)) {\n      setGenres([...genres, genre]);\n    }\n    setNewGenre(\"\");\n  };\n\n  const removeGenre = (genre: string) => {\n    setGenres(genres.filter((g) => g !== genre));\n  };\n\n  const handleMediaComplete = async (uploadURL: string) => {\n    try {\n      const response: any = await apiRequest(\"PUT\", \"/api/projects/media\", {\n        mediaURL: uploadURL,\n      });\n      setMediaUrl(response.mediaPath);\n      \n      const fileExtension = response.mediaPath?.split('.').pop()?.toLowerCase();\n      const audioExts = ['mp3', 'wav', 'ogg', 'm4a', 'flac'];\n      const videoExts = ['mp4', 'webm', 'mov', 'avi'];\n      \n      if (audioExts.includes(fileExtension)) {\n        setMediaType('audio');\n      } else if (videoExts.includes(fileExtension)) {\n        setMediaType('video');\n      } else {\n        setMediaType('image');\n      }\n      \n      if (response.duration) {\n        setMediaDuration(response.duration);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"mx-auto max-w-3xl px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation(\"/\")} data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"font-serif text-3xl font-bold\">Share Project</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Showcase your creative work\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-3xl px-4 py-8 sm:px-6 lg:px-8\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold\">\n                Project Details\n              </h2>\n              <div className=\"mt-6 space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title *</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"e.g., Summer Nights - Pop Collaboration\"\n                          data-testid=\"input-title\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description *</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Tell us about your project...\"\n                          rows={6}\n                          data-testid=\"input-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"collaborators\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number of Collaborators</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"number\"\n                          min=\"1\"\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          data-testid=\"input-collaborators\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold\">Media</h2>\n              <p className=\"mt-2 text-sm text-muted-foreground\">\n                Upload a preview image, audio, or video file\n              </p>\n              <div className=\"mt-4\">\n                {mediaUrl ? (\n                  <div className=\"rounded-md border p-4\">\n                    <p className=\"text-sm\">Media uploaded successfully</p>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setMediaUrl(\"\")}\n                      className=\"mt-2\"\n                      data-testid=\"button-remove-media\"\n                    >\n                      <X className=\"mr-2 h-4 w-4\" />\n                      Remove\n                    </Button>\n                  </div>\n                ) : (\n                  <SimpleUploader\n                    onUploadComplete={handleMediaComplete}\n                    buttonClassName=\"w-full\"\n                    accept=\"image/*,video/*,audio/*\"\n                    data-testid=\"button-upload-media\"\n                  >\n                    <Upload className=\"mr-2 h-4 w-4\" />\n                    Upload Media\n                  </SimpleUploader>\n                )}\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold\">Genres</h2>\n              <div className=\"mt-4\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {genres.map((genre) => (\n                    <Badge key={genre} variant=\"secondary\" className=\"gap-2\">\n                      {genre}\n                      <button\n                        type=\"button\"\n                        onClick={() => removeGenre(genre)}\n                        className=\"hover-elevate rounded-sm\"\n                        data-testid={`button-remove-genre-${genre}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n                <div className=\"mt-4 flex gap-2\">\n                  <Input\n                    placeholder=\"Add a genre\"\n                    value={newGenre}\n                    onChange={(e) => setNewGenre(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        e.preventDefault();\n                        addGenre(newGenre);\n                      }\n                    }}\n                    list=\"genres-list\"\n                    data-testid=\"input-new-genre\"\n                  />\n                  <datalist id=\"genres-list\">\n                    {COMMON_GENRES.map((g) => (\n                      <option key={g} value={g} />\n                    ))}\n                  </datalist>\n                  <Button type=\"button\" onClick={() => addGenre(newGenre)} data-testid=\"button-add-genre\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n\n            <div className=\"flex justify-end gap-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setLocation(\"/\")}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createProjectMutation.isPending}\n                data-testid=\"button-submit\"\n              >\n                {createProjectMutation.isPending ? \"Sharing...\" : \"Share Project\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11183},"client/src/pages/opportunity-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, X, Calendar } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nconst opportunitySchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  compensation: z.string().optional(),\n  deadline: z.string().optional(),\n});\n\ntype OpportunityFormData = z.infer<typeof opportunitySchema>;\n\nconst COMMON_GENRES = [\n  \"Pop\",\n  \"Rock\",\n  \"Hip Hop\",\n  \"Electronic\",\n  \"Jazz\",\n  \"Classical\",\n  \"R&B\",\n  \"Country\",\n];\n\nconst COMMON_SKILLS = [\n  \"Vocals\",\n  \"Guitar\",\n  \"Piano\",\n  \"Drums\",\n  \"Production\",\n  \"Mixing\",\n  \"Songwriting\",\n  \"DJ\",\n];\n\nexport default function OpportunityForm() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [requiredSkills, setRequiredSkills] = useState<string[]>([]);\n  const [genres, setGenres] = useState<string[]>([]);\n  const [newSkill, setNewSkill] = useState(\"\");\n  const [newGenre, setNewGenre] = useState(\"\");\n\n  const form = useForm<OpportunityFormData>({\n    resolver: zodResolver(opportunitySchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      compensation: \"\",\n      deadline: \"\",\n    },\n  });\n\n  const createOpportunityMutation = useMutation({\n    mutationFn: async (data: OpportunityFormData & { requiredSkills: string[]; genres: string[] }) => {\n      const response = await apiRequest(\"POST\", \"/api/opportunities\", data);\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/opportunities\"] });\n      toast({\n        title: \"Success\",\n        description: \"Opportunity created successfully\",\n      });\n      if (data?.id) {\n        setLocation(`/opportunities/${data.id}`);\n      } else {\n        setLocation(\"/discover\");\n      }\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: OpportunityFormData) => {\n    createOpportunityMutation.mutate({\n      ...data,\n      requiredSkills,\n      genres,\n    });\n  };\n\n  const addSkill = (skill: string) => {\n    if (skill && !requiredSkills.includes(skill)) {\n      setRequiredSkills([...requiredSkills, skill]);\n    }\n    setNewSkill(\"\");\n  };\n\n  const removeSkill = (skill: string) => {\n    setRequiredSkills(requiredSkills.filter((s) => s !== skill));\n  };\n\n  const addGenre = (genre: string) => {\n    if (genre && !genres.includes(genre)) {\n      setGenres([...genres, genre]);\n    }\n    setNewGenre(\"\");\n  };\n\n  const removeGenre = (genre: string) => {\n    setGenres(genres.filter((g) => g !== genre));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"mx-auto max-w-3xl px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation(\"/\")} data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"font-serif text-3xl font-bold\">Create Opportunity</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Post a new collaboration opportunity\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-3xl px-4 py-8 sm:px-6 lg:px-8\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold\">\n                Basic Information\n              </h2>\n              <div className=\"mt-6 space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title *</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"e.g., Looking for Vocalist for Pop Track\"\n                          data-testid=\"input-title\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description *</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Describe the opportunity in detail...\"\n                          rows={6}\n                          data-testid=\"input-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"compensation\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Compensation</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"e.g., $500, Revenue Share, Negotiable\"\n                          data-testid=\"input-compensation\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"deadline\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Application Deadline</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            {...field}\n                            type=\"date\"\n                            className=\"pr-10\"\n                            data-testid=\"input-deadline\"\n                          />\n                          <Calendar className=\"absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground pointer-events-none\" />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold\">\n                Required Skills\n              </h2>\n              <div className=\"mt-4\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {requiredSkills.map((skill) => (\n                    <Badge key={skill} variant=\"secondary\" className=\"gap-2\">\n                      {skill}\n                      <button\n                        type=\"button\"\n                        onClick={() => removeSkill(skill)}\n                        className=\"hover-elevate rounded-sm\"\n                        data-testid={`button-remove-skill-${skill}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n                <div className=\"mt-4 flex gap-2\">\n                  <Input\n                    placeholder=\"Add a required skill\"\n                    value={newSkill}\n                    onChange={(e) => setNewSkill(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        e.preventDefault();\n                        addSkill(newSkill);\n                      }\n                    }}\n                    list=\"skills-list\"\n                    data-testid=\"input-new-skill\"\n                  />\n                  <datalist id=\"skills-list\">\n                    {COMMON_SKILLS.map((s) => (\n                      <option key={s} value={s} />\n                    ))}\n                  </datalist>\n                  <Button type=\"button\" onClick={() => addSkill(newSkill)} data-testid=\"button-add-skill\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold\">Genres</h2>\n              <div className=\"mt-4\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {genres.map((genre) => (\n                    <Badge key={genre} variant=\"secondary\" className=\"gap-2\">\n                      {genre}\n                      <button\n                        type=\"button\"\n                        onClick={() => removeGenre(genre)}\n                        className=\"hover-elevate rounded-sm\"\n                        data-testid={`button-remove-genre-${genre}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n                <div className=\"mt-4 flex gap-2\">\n                  <Input\n                    placeholder=\"Add a genre\"\n                    value={newGenre}\n                    onChange={(e) => setNewGenre(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        e.preventDefault();\n                        addGenre(newGenre);\n                      }\n                    }}\n                    list=\"genres-list\"\n                    data-testid=\"input-new-genre\"\n                  />\n                  <datalist id=\"genres-list\">\n                    {COMMON_GENRES.map((g) => (\n                      <option key={g} value={g} />\n                    ))}\n                  </datalist>\n                  <Button type=\"button\" onClick={() => addGenre(newGenre)} data-testid=\"button-add-genre\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n\n            <div className=\"flex justify-end gap-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setLocation(\"/\")}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createOpportunityMutation.isPending}\n                data-testid=\"button-submit\"\n              >\n                {createOpportunityMutation.isPending ? \"Creating...\" : \"Create Opportunity\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12137},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/pages/discover.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Search, Music, Building2, Filter, X } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Opportunity, Project, ArtistProfile, User } from \"@shared/schema\";\n\nconst COMMON_GENRES = [\n  \"Pop\",\n  \"Rock\",\n  \"Hip Hop\",\n  \"Electronic\",\n  \"Jazz\",\n  \"Classical\",\n  \"R&B\",\n  \"Country\",\n];\n\nconst COMMON_SKILLS = [\n  \"Vocals\",\n  \"Guitar\",\n  \"Piano\",\n  \"Drums\",\n  \"Production\",\n  \"Mixing\",\n  \"Songwriting\",\n  \"DJ\",\n];\n\nexport default function Discover() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterType, setFilterType] = useState<\"all\" | \"opportunities\" | \"projects\" | \"artists\">(\"all\");\n  const [selectedGenre, setSelectedGenre] = useState<string>(\"all\");\n  const [selectedSkill, setSelectedSkill] = useState<string>(\"all\");\n\n  const { data: opportunities, isLoading: opportunitiesLoading } = useQuery<\n    (Opportunity & { label: { companyName: string; logoUrl: string | null } })[]\n  >({\n    queryKey: [\"/api/opportunities\"],\n  });\n\n  const { data: projects, isLoading: projectsLoading } = useQuery<\n    (Project & { artist: { user: User } })[]\n  >({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: artists, isLoading: artistsLoading } = useQuery<\n    (ArtistProfile & { user: User })[]\n  >({\n    queryKey: [\"/api/artists\"],\n  });\n\n  const filteredOpportunities = opportunities?.filter((opp) => {\n    const matchesSearch =\n      opp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      opp.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesGenre = selectedGenre === \"all\" || opp.genres.includes(selectedGenre);\n    const matchesSkill = selectedSkill === \"all\" || opp.requiredSkills.includes(selectedSkill);\n    return matchesSearch && matchesGenre && matchesSkill;\n  });\n\n  const filteredProjects = projects?.filter((proj) => {\n    const matchesSearch =\n      proj.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      proj.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesGenre = selectedGenre === \"all\" || proj.genres.includes(selectedGenre);\n    return matchesSearch && matchesGenre;\n  });\n\n  const filteredArtists = artists?.filter((artist) => {\n    const matchesSearch =\n      artist.user.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      artist.user.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      artist.bio?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesGenre = selectedGenre === \"all\" || artist.genres.includes(selectedGenre);\n    const matchesSkill = selectedSkill === \"all\" || artist.skills.includes(selectedSkill);\n    return matchesSearch && matchesGenre && matchesSkill;\n  });\n\n  const showOpportunities = filterType === \"all\" || filterType === \"opportunities\";\n  const showProjects = filterType === \"all\" || filterType === \"projects\";\n  const showArtists = filterType === \"all\" || filterType === \"artists\";\n\n  const hasActiveFilters = selectedGenre !== \"all\" || selectedSkill !== \"all\";\n\n  const clearFilters = () => {\n    setSelectedGenre(\"all\");\n    setSelectedSkill(\"all\");\n    setSearchQuery(\"\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8\">\n          <h1 className=\"font-serif text-3xl font-bold\">Discover</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Find opportunities, projects, and artists\n          </p>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8\">\n        <div className=\"mb-8 space-y-4\">\n          <div className=\"flex flex-col gap-4 sm:flex-row\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search for opportunities, projects, or artists...\"\n                className=\"pl-10\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={filterType} onValueChange={(v: any) => setFilterType(v)}>\n              <SelectTrigger className=\"w-full sm:w-[180px]\" data-testid=\"select-filter-type\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                <SelectValue placeholder=\"Filter by type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All</SelectItem>\n                <SelectItem value=\"opportunities\">Opportunities</SelectItem>\n                <SelectItem value=\"projects\">Projects</SelectItem>\n                <SelectItem value=\"artists\">Artists</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex flex-wrap gap-2\">\n            <Select value={selectedGenre} onValueChange={setSelectedGenre}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-genre\">\n                <SelectValue placeholder=\"Genre\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Genres</SelectItem>\n                {COMMON_GENRES.map((genre) => (\n                  <SelectItem key={genre} value={genre}>\n                    {genre}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedSkill} onValueChange={setSelectedSkill}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-skill\">\n                <SelectValue placeholder=\"Skill\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Skills</SelectItem>\n                {COMMON_SKILLS.map((skill) => (\n                  <SelectItem key={skill} value={skill}>\n                    {skill}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            {hasActiveFilters && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={clearFilters}\n                data-testid=\"button-clear-filters\"\n              >\n                <X className=\"mr-2 h-4 w-4\" />\n                Clear Filters\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"space-y-12\">\n          {showOpportunities && (\n            <section>\n              <h2 className=\"mb-6 font-serif text-2xl font-semibold\">\n                Opportunities\n              </h2>\n              {opportunitiesLoading ? (\n                <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                  {[1, 2, 3].map((i) => (\n                    <Card key={i} className=\"p-6\">\n                      <Skeleton className=\"h-12 w-12 rounded-md\" />\n                      <Skeleton className=\"mt-4 h-6 w-3/4\" />\n                      <Skeleton className=\"mt-2 h-4 w-full\" />\n                      <div className=\"mt-4 flex gap-2\">\n                        <Skeleton className=\"h-6 w-16\" />\n                        <Skeleton className=\"h-6 w-16\" />\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredOpportunities && filteredOpportunities.length > 0 ? (\n                <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                  {filteredOpportunities.map((opp) => (\n                    <Card\n                      key={opp.id}\n                      className=\"cursor-pointer p-6 hover-elevate\"\n                      onClick={() => setLocation(`/opportunities/${opp.id}`)}\n                      data-testid={`card-opportunity-${opp.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-card\">\n                          {opp.label.logoUrl ? (\n                            <img\n                              src={opp.label.logoUrl}\n                              alt={opp.label.companyName}\n                              className=\"h-full w-full rounded-md object-cover\"\n                            />\n                          ) : (\n                            <Building2 className=\"h-6 w-6 text-muted-foreground\" />\n                          )}\n                        </div>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {opp.status}\n                        </Badge>\n                      </div>\n                      <h3 className=\"mt-4 font-serif text-xl font-semibold line-clamp-1\">\n                        {opp.title}\n                      </h3>\n                      <p className=\"mt-1 text-sm text-muted-foreground\">\n                        {opp.label.companyName}\n                      </p>\n                      <p className=\"mt-2 text-sm text-muted-foreground line-clamp-2\">\n                        {opp.description}\n                      </p>\n                      <div className=\"mt-4 flex flex-wrap gap-2\">\n                        {opp.requiredSkills.slice(0, 3).map((skill, idx) => (\n                          <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                            {skill}\n                          </Badge>\n                        ))}\n                        {opp.requiredSkills.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{opp.requiredSkills.length - 3}\n                          </Badge>\n                        )}\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <Card className=\"p-12 text-center\">\n                  <p className=\"text-muted-foreground\">No opportunities found</p>\n                </Card>\n              )}\n            </section>\n          )}\n\n          {showProjects && (\n            <section>\n              <h2 className=\"mb-6 font-serif text-2xl font-semibold\">\n                Projects\n              </h2>\n              {projectsLoading ? (\n                <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                  {[1, 2, 3].map((i) => (\n                    <Card key={i} className=\"overflow-hidden\">\n                      <Skeleton className=\"h-48 w-full\" />\n                      <div className=\"p-6\">\n                        <Skeleton className=\"h-6 w-3/4\" />\n                        <Skeleton className=\"mt-2 h-4 w-1/2\" />\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredProjects && filteredProjects.length > 0 ? (\n                <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                  {filteredProjects.map((project) => (\n                    <Card\n                      key={project.id}\n                      className=\"cursor-pointer overflow-hidden hover-elevate\"\n                      onClick={() => setLocation(`/projects/${project.id}`)}\n                      data-testid={`card-project-${project.id}`}\n                    >\n                      <div className=\"relative aspect-video bg-muted\">\n                        {project.mediaUrl ? (\n                          <img\n                            src={project.mediaUrl}\n                            alt={project.title}\n                            className=\"h-full w-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"flex h-full items-center justify-center\">\n                            <Music className=\"h-12 w-12 text-muted-foreground\" />\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"p-6\">\n                        <h3 className=\"font-serif text-lg font-semibold line-clamp-1\">\n                          {project.title}\n                        </h3>\n                        <p className=\"mt-1 text-sm text-muted-foreground\">\n                          by{\" \"}\n                          {project.artist.user.firstName ||\n                            project.artist.user.email}\n                        </p>\n                        <div className=\"mt-4 flex flex-wrap gap-2\">\n                          {project.genres.slice(0, 2).map((genre, idx) => (\n                            <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                              {genre}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <Card className=\"p-12 text-center\">\n                  <p className=\"text-muted-foreground\">No projects found</p>\n                </Card>\n              )}\n            </section>\n          )}\n\n          {showArtists && (\n            <section>\n              <h2 className=\"mb-6 font-serif text-2xl font-semibold\">\n                Artists\n              </h2>\n              {artistsLoading ? (\n                <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                  {[1, 2, 3].map((i) => (\n                    <Card key={i} className=\"p-6\">\n                      <Skeleton className=\"h-16 w-16 rounded-full\" />\n                      <Skeleton className=\"mt-4 h-6 w-2/3\" />\n                      <Skeleton className=\"mt-2 h-4 w-full\" />\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredArtists && filteredArtists.length > 0 ? (\n                <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                  {filteredArtists.map((artist) => (\n                    <Card\n                      key={artist.id}\n                      className=\"cursor-pointer p-6 hover-elevate\"\n                      onClick={() => setLocation(`/artists/${artist.userId}`)}\n                      data-testid={`card-artist-${artist.userId}`}\n                    >\n                      <div className=\"flex items-center gap-4\">\n                        <Avatar className=\"h-16 w-16\">\n                          <AvatarImage src={artist.user.profileImageUrl || undefined} />\n                          <AvatarFallback>\n                            {artist.user.firstName?.[0] || artist.user.email?.[0] || \"A\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"font-serif text-lg font-semibold line-clamp-1\">\n                            {artist.user.firstName || artist.user.email}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {artist.location || \"Location not set\"}\n                          </p>\n                        </div>\n                      </div>\n                      {artist.bio && (\n                        <p className=\"mt-4 text-sm text-muted-foreground line-clamp-2\">\n                          {artist.bio}\n                        </p>\n                      )}\n                      <div className=\"mt-4 flex flex-wrap gap-2\">\n                        {artist.genres.slice(0, 3).map((genre, idx) => (\n                          <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                            {genre}\n                          </Badge>\n                        ))}\n                        {artist.genres.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{artist.genres.length - 3}\n                          </Badge>\n                        )}\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <Card className=\"p-12 text-center\">\n                  <p className=\"text-muted-foreground\">No artists found</p>\n                </Card>\n              )}\n            </section>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16784},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/pages/role-selection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Music, Building2, CheckCircle2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function RoleSelection() {\n  const [selectedRole, setSelectedRole] = useState<\"artist\" | \"label\" | null>(null);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const selectRoleMutation = useMutation({\n    mutationFn: async (role: \"artist\" | \"label\") => {\n      return await apiRequest(\"POST\", \"/api/users/role\", { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleContinue = () => {\n    if (selectedRole) {\n      selectRoleMutation.mutate(selectedRole);\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-background px-4 py-12\">\n      <div className=\"w-full max-w-4xl\">\n        <div className=\"text-center\">\n          <h1 className=\"font-serif text-3xl font-bold sm:text-4xl\">\n            Welcome to COLZ\n          </h1>\n          <p className=\"mt-2 text-lg text-muted-foreground\">\n            Choose your role to get started\n          </p>\n        </div>\n\n        <div className=\"mt-12 grid gap-6 sm:grid-cols-2\">\n          <Card\n            className={`cursor-pointer p-8 transition-all hover-elevate ${\n              selectedRole === \"artist\" ? \"ring-2 ring-primary\" : \"\"\n            }`}\n            onClick={() => setSelectedRole(\"artist\")}\n            data-testid=\"card-role-artist\"\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                <Music className=\"h-6 w-6 text-primary\" />\n              </div>\n              {selectedRole === \"artist\" && (\n                <CheckCircle2 className=\"h-6 w-6 text-primary\" data-testid=\"icon-selected-artist\" />\n              )}\n            </div>\n            <h2 className=\"mt-4 font-serif text-2xl font-semibold\">\n              I'm an Artist\n            </h2>\n            <p className=\"mt-2 leading-relaxed text-muted-foreground\">\n              Showcase your portfolio, find collaboration opportunities, \n              and connect with labels and other artists.\n            </p>\n            <ul className=\"mt-6 space-y-2 text-sm\">\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Create a stunning artist profile</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Upload portfolio samples</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Apply to opportunities</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Share your projects</span>\n              </li>\n            </ul>\n          </Card>\n\n          <Card\n            className={`cursor-pointer p-8 transition-all hover-elevate ${\n              selectedRole === \"label\" ? \"ring-2 ring-primary\" : \"\"\n            }`}\n            onClick={() => setSelectedRole(\"label\")}\n            data-testid=\"card-role-label\"\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                <Building2 className=\"h-6 w-6 text-primary\" />\n              </div>\n              {selectedRole === \"label\" && (\n                <CheckCircle2 className=\"h-6 w-6 text-primary\" data-testid=\"icon-selected-label\" />\n              )}\n            </div>\n            <h2 className=\"mt-4 font-serif text-2xl font-semibold\">\n              I'm a Label\n            </h2>\n            <p className=\"mt-2 leading-relaxed text-muted-foreground\">\n              Post opportunities, discover talented artists, \n              and manage applications all in one place.\n            </p>\n            <ul className=\"mt-6 space-y-2 text-sm\">\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Create a professional label profile</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Post collaboration opportunities</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Browse artist profiles</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Manage applications</span>\n              </li>\n            </ul>\n          </Card>\n        </div>\n\n        <div className=\"mt-8 text-center\">\n          <Button\n            size=\"lg\"\n            disabled={!selectedRole || selectRoleMutation.isPending}\n            onClick={handleContinue}\n            data-testid=\"button-continue\"\n          >\n            {selectRoleMutation.isPending ? \"Setting up...\" : \"Continue\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6047},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Building2,\n  Briefcase,\n  FolderOpen,\n} from \"lucide-react\";\nimport type { Opportunity, Project, User as UserType } from \"@shared/schema\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ProjectMediaDisplay } from \"@/components/ProjectMediaDisplay\";\nimport { AppHeader } from \"@/components/AppHeader\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  const { data: opportunities, isLoading: opportunitiesLoading } = useQuery<\n    (Opportunity & { label: { companyName: string; logoUrl: string | null } })[]\n  >({\n    queryKey: [\"/api/opportunities\"],\n  });\n\n  const { data: projects, isLoading: projectsLoading } = useQuery<\n    (Project & {\n      artist: {\n        user: UserType;\n      };\n    })[]\n  >({\n    queryKey: [\"/api/projects\"],\n  });\n\n  return (\n    <div className=\"flex min-h-screen flex-col bg-background\">\n      <AppHeader />\n\n      <main className=\"flex-1\">\n        <div className=\"mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"font-serif text-3xl font-bold sm:text-4xl\">\n              Welcome back{user?.firstName ? `, ${user.firstName}` : \"\"}\n            </h1>\n            <p className=\"mt-2 text-muted-foreground\">\n              {user?.role === \"artist\"\n                ? \"Discover new opportunities and share your creative work\"\n                : \"Find talented artists and manage your opportunities\"}\n            </p>\n          </div>\n\n          <div className=\"space-y-12\">\n            {user?.role === \"artist\" && (\n              <section>\n                <div className=\"mb-6 flex items-center justify-between\">\n                  <h2 className=\"font-serif text-2xl font-semibold\">\n                    Latest Opportunities\n                  </h2>\n                  <Button variant=\"ghost\" asChild data-testid=\"link-view-all-opportunities\">\n                    <Link href=\"/discover?filter=opportunities\">View All</Link>\n                  </Button>\n                </div>\n\n                {opportunitiesLoading ? (\n                  <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                    {[1, 2, 3].map((i) => (\n                      <Card key={i} className=\"p-6\">\n                        <Skeleton className=\"h-12 w-12 rounded-md\" />\n                        <Skeleton className=\"mt-4 h-6 w-3/4\" />\n                        <Skeleton className=\"mt-2 h-4 w-full\" />\n                        <Skeleton className=\"mt-2 h-4 w-2/3\" />\n                        <div className=\"mt-4 flex gap-2\">\n                          <Skeleton className=\"h-6 w-16\" />\n                          <Skeleton className=\"h-6 w-16\" />\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : opportunities && opportunities.length > 0 ? (\n                  <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                    {opportunities.slice(0, 6).map((opp) => (\n                      <Card\n                        key={opp.id}\n                        className=\"cursor-pointer p-6 hover-elevate\"\n                        onClick={() => setLocation(`/opportunities/${opp.id}`)}\n                        data-testid={`card-opportunity-${opp.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-card\">\n                            {opp.label.logoUrl ? (\n                              <img\n                                src={opp.label.logoUrl}\n                                alt={opp.label.companyName}\n                                className=\"h-full w-full rounded-md object-cover\"\n                              />\n                            ) : (\n                              <Building2 className=\"h-6 w-6 text-muted-foreground\" />\n                            )}\n                          </div>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {opp.status}\n                          </Badge>\n                        </div>\n                        <h3 className=\"mt-4 font-serif text-xl font-semibold line-clamp-1\">\n                          {opp.title}\n                        </h3>\n                        <p className=\"mt-2 text-sm text-muted-foreground line-clamp-2\">\n                          {opp.description}\n                        </p>\n                        <div className=\"mt-4 flex flex-wrap gap-2\">\n                          {opp.requiredSkills.slice(0, 3).map((skill, idx) => (\n                            <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                              {skill}\n                            </Badge>\n                          ))}\n                          {opp.requiredSkills.length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{opp.requiredSkills.length - 3}\n                            </Badge>\n                          )}\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <Card className=\"p-12 text-center\">\n                    <Briefcase className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                    <h3 className=\"mt-4 font-serif text-lg font-semibold\">\n                      No opportunities yet\n                    </h3>\n                    <p className=\"mt-2 text-sm text-muted-foreground\">\n                      Check back soon for new collaboration opportunities\n                    </p>\n                  </Card>\n                )}\n              </section>\n            )}\n\n            <section>\n              <div className=\"mb-6 flex items-center justify-between\">\n                <h2 className=\"font-serif text-2xl font-semibold\">\n                  Featured Projects\n                </h2>\n                <Button variant=\"ghost\" asChild data-testid=\"link-view-all-projects\">\n                  <Link href=\"/discover?filter=projects\">View All</Link>\n                </Button>\n              </div>\n\n              {projectsLoading ? (\n                <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                  {[1, 2, 3].map((i) => (\n                    <Card key={i} className=\"overflow-hidden\">\n                      <Skeleton className=\"h-48 w-full\" />\n                      <div className=\"p-6\">\n                        <Skeleton className=\"h-6 w-3/4\" />\n                        <Skeleton className=\"mt-2 h-4 w-full\" />\n                        <div className=\"mt-4 flex gap-2\">\n                          <Skeleton className=\"h-6 w-16\" />\n                          <Skeleton className=\"h-6 w-16\" />\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : projects && projects.length > 0 ? (\n                <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                  {projects.slice(0, 6).map((project) => (\n                    <Card\n                      key={project.id}\n                      className=\"group cursor-pointer overflow-hidden hover-elevate\"\n                      onClick={() => setLocation(`/projects/${project.id}`)}\n                      data-testid={`card-project-${project.id}`}\n                    >\n                      <div className=\"relative aspect-video bg-muted\">\n                        <ProjectMediaDisplay project={project} />\n                      </div>\n                      <div className=\"p-6\">\n                        <h3 className=\"font-serif text-lg font-semibold line-clamp-1\">\n                          {project.title}\n                        </h3>\n                        <p className=\"mt-1 text-sm text-muted-foreground\">\n                          by{\" \"}\n                          {project.artist.user.firstName ||\n                            project.artist.user.email}\n                        </p>\n                        <div className=\"mt-4 flex flex-wrap gap-2\">\n                          {project.genres.slice(0, 2).map((genre, idx) => (\n                            <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                              {genre}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <Card className=\"p-12 text-center\">\n                  <FolderOpen className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                  <h3 className=\"mt-4 font-serif text-lg font-semibold\">\n                    No projects yet\n                  </h3>\n                  <p className=\"mt-2 text-sm text-muted-foreground\">\n                    Be the first to share your creative work\n                  </p>\n                  {user?.role === \"artist\" && (\n                    <Button className=\"mt-4\" asChild>\n                      <Link href=\"/projects/new\">Share Your Project</Link>\n                    </Button>\n                  )}\n                </Card>\n              )}\n            </section>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9625},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n  \"data-testid\"?: string;\n}\n\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760,\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n  \"data-testid\": dataTestId,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName} data-testid={dataTestId}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":1630},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/applications.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Check, X, Calendar } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Application, Opportunity } from \"@shared/schema\";\n\ninterface ApplicationWithDetails extends Application {\n  artist?: {\n    id: string;\n    userId: string;\n    bio?: string;\n    location?: string;\n    genres?: string[];\n    skills?: string[];\n    user?: {\n      id: string;\n      email: string;\n      firstName?: string;\n      lastName?: string;\n      profileImageUrl?: string;\n    };\n  };\n  opportunity?: Opportunity;\n}\n\nexport default function Applications() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const { data: opportunities = [], isLoading: loadingOpportunities } = useQuery<Opportunity[]>({\n    queryKey: [\"/api/opportunities\"],\n  });\n\n  const { data: allApplications = [], isLoading: loadingApplications } = useQuery<ApplicationWithDetails[]>({\n    queryKey: [\"/api/applications\"],\n    enabled: opportunities.length > 0,\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return await apiRequest(\"PATCH\", `/api/applications/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/applications\"] });\n      toast({\n        title: \"Success\",\n        description: \"Application status updated\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const isLoading = loadingOpportunities || loadingApplications;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n          <div className=\"mx-auto max-w-6xl px-4 py-6 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center gap-4\">\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation(\"/\")} data-testid=\"button-back\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n              <div>\n                <h1 className=\"font-serif text-3xl font-bold\">Applications</h1>\n                <p className=\"text-sm text-muted-foreground\">Manage artist applications</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"mx-auto max-w-6xl px-4 py-8 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto\"></div>\n              <p className=\"mt-4 text-muted-foreground\">Loading applications...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const grouped = allApplications.reduce((acc, app) => {\n    const oppId = app.opportunityId;\n    if (!acc[oppId]) {\n      acc[oppId] = [];\n    }\n    acc[oppId].push(app);\n    return acc;\n  }, {} as Record<string, ApplicationWithDetails[]>);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"mx-auto max-w-6xl px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation(\"/\")} data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"font-serif text-3xl font-bold\">Applications</h1>\n              <p className=\"text-sm text-muted-foreground\">Manage artist applications</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-6xl px-4 py-8 sm:px-6 lg:px-8 space-y-8\">\n        {allApplications.length === 0 ? (\n          <Card className=\"p-12\">\n            <div className=\"text-center\">\n              <p className=\"text-lg text-muted-foreground\">No applications yet</p>\n              <p className=\"mt-2 text-sm text-muted-foreground\">\n                Artists will see your opportunities and apply when interested\n              </p>\n            </div>\n          </Card>\n        ) : (\n          opportunities.map((opp) => {\n            const apps = grouped[opp.id] || [];\n            if (apps.length === 0) return null;\n\n            return (\n              <div key={opp.id}>\n                <div className=\"mb-4\">\n                  <h2 className=\"font-serif text-2xl font-semibold\">{opp.title}</h2>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{apps.length} application{apps.length !== 1 ? 's' : ''}</p>\n                </div>\n                <div className=\"grid gap-4\">\n                  {apps.map((app) => (\n                    <Card key={app.id} className=\"p-6\" data-testid={`card-application-${app.id}`}>\n                      <div className=\"flex items-start gap-6\">\n                        <Avatar className=\"h-16 w-16 flex-shrink-0\">\n                          <AvatarImage src={app.artist?.user?.profileImageUrl || undefined} />\n                          <AvatarFallback className=\"text-lg\">\n                            {app.artist?.user?.firstName?.[0] || app.artist?.user?.email?.[0] || \"A\"}\n                          </AvatarFallback>\n                        </Avatar>\n\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-start justify-between gap-4 flex-wrap\">\n                            <div className=\"min-w-0 flex-1\">\n                              <h3 className=\"font-semibold text-lg\">\n                                {app.artist?.user?.firstName || app.artist?.user?.email}\n                              </h3>\n                              {app.artist?.location && (\n                                <p className=\"text-sm text-muted-foreground\">{app.artist.location}</p>\n                              )}\n                            </div>\n                            <Badge\n                              variant={\n                                app.status === \"accepted\"\n                                  ? \"default\"\n                                  : app.status === \"rejected\"\n                                  ? \"destructive\"\n                                  : \"secondary\"\n                              }\n                              data-testid={`badge-status-${app.id}`}\n                            >\n                              {app.status}\n                            </Badge>\n                          </div>\n\n                          {app.artist?.genres && app.artist.genres.length > 0 && (\n                            <div className=\"mt-3 flex flex-wrap gap-2\">\n                              {app.artist.genres.map((genre) => (\n                                <Badge key={genre} variant=\"outline\">\n                                  {genre}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n\n                          {app.coverLetter && (\n                            <div className=\"mt-4\">\n                              <p className=\"text-sm font-medium mb-2\">Cover Letter</p>\n                              <p className=\"text-sm text-muted-foreground\">{app.coverLetter}</p>\n                            </div>\n                          )}\n\n                          <div className=\"mt-4 flex items-center gap-2 text-xs text-muted-foreground\">\n                            <Calendar className=\"h-3 w-3\" />\n                            Applied {new Date(app.createdAt).toLocaleDateString()}\n                          </div>\n\n                          {app.status === \"pending\" && (\n                            <div className=\"mt-4 flex gap-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"default\"\n                                onClick={() =>\n                                  updateStatusMutation.mutate({ id: app.id, status: \"accepted\" })\n                                }\n                                disabled={updateStatusMutation.isPending}\n                                data-testid={`button-accept-${app.id}`}\n                              >\n                                <Check className=\"mr-2 h-4 w-4\" />\n                                Accept\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() =>\n                                  updateStatusMutation.mutate({ id: app.id, status: \"rejected\" })\n                                }\n                                disabled={updateStatusMutation.isPending}\n                                data-testid={`button-reject-${app.id}`}\n                              >\n                                <X className=\"mr-2 h-4 w-4\" />\n                                Reject\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10134},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4254},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/storage.ts":{"content":"import {\n  users,\n  artistProfiles,\n  labelProfiles,\n  opportunities,\n  projects,\n  applications,\n  conversations,\n  messages,\n  notifications,\n  userPreferences,\n  type User,\n  type UpsertUser,\n  type ArtistProfile,\n  type InsertArtistProfile,\n  type LabelProfile,\n  type InsertLabelProfile,\n  type Opportunity,\n  type InsertOpportunity,\n  type Project,\n  type InsertProject,\n  type Application,\n  type InsertApplication,\n  type Conversation,\n  type Message,\n  type InsertMessage,\n  type Notification,\n  type InsertNotification,\n  type UserPreferences,\n  type InsertUserPreferences,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, or, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserRole(id: string, role: string): Promise<User>;\n  updateUserProfileImage(id: string, profileImageUrl: string): Promise<User>;\n  updateUserDetails(id: string, data: { firstName?: string; lastName?: string }): Promise<User>;\n\n  getArtistProfile(userId: string): Promise<ArtistProfile | undefined>;\n  createOrUpdateArtistProfile(data: Omit<InsertArtistProfile, \"userId\">, userId: string): Promise<ArtistProfile>;\n  getArtistProfiles(): Promise<ArtistProfile[]>;\n  getArtistProfileById(id: string): Promise<ArtistProfile | undefined>;\n\n  getLabelProfile(userId: string): Promise<LabelProfile | undefined>;\n  createOrUpdateLabelProfile(data: Omit<InsertLabelProfile, \"userId\">, userId: string): Promise<LabelProfile>;\n  getLabelProfiles(): Promise<LabelProfile[]>;\n  getLabelProfileById(id: string): Promise<LabelProfile | undefined>;\n\n  createOpportunity(data: InsertOpportunity): Promise<Opportunity>;\n  getOpportunities(): Promise<Opportunity[]>;\n  getOpportunityById(id: string): Promise<Opportunity | undefined>;\n  getOpportunitiesByLabel(labelId: string): Promise<Opportunity[]>;\n\n  createProject(data: InsertProject): Promise<Project>;\n  getProjects(): Promise<Project[]>;\n  getProjectById(id: string): Promise<Project | undefined>;\n  getProjectsByArtist(artistId: string): Promise<Project[]>;\n\n  createApplication(data: InsertApplication): Promise<Application>;\n  getApplicationsByOpportunity(opportunityId: string): Promise<Application[]>;\n  getApplicationsByArtist(artistId: string): Promise<Application[]>;\n  updateApplicationStatus(id: string, status: string): Promise<Application>;\n\n  getOrCreateConversation(user1Id: string, user2Id: string): Promise<Conversation>;\n  getConversationsByUser(userId: string): Promise<Conversation[]>;\n  sendMessage(data: InsertMessage): Promise<Message>;\n  getMessagesByConversation(conversationId: string): Promise<Message[]>;\n  markMessageAsRead(messageId: string): Promise<Message>;\n\n  createNotification(data: InsertNotification): Promise<Notification>;\n  getNotificationsByUser(userId: string, limit?: number): Promise<Notification[]>;\n  getUnreadNotificationCount(userId: string): Promise<number>;\n  markNotificationAsRead(notificationId: string, userId: string): Promise<Notification | undefined>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n\n  getUserPreferences(userId: string): Promise<UserPreferences | undefined>;\n  createOrUpdateUserPreferences(data: Omit<InsertUserPreferences, \"userId\">, userId: string): Promise<UserPreferences>;\n\n  getOpportunityAnalytics(labelId: string): Promise<{\n    opportunityId: string;\n    title: string;\n    totalApplications: number;\n    pendingApplications: number;\n    acceptedApplications: number;\n    rejectedApplications: number;\n    acceptanceRate: number;\n    createdAt: Date | null;\n  }[]>;\n  getApplicationStatusBreakdown(labelId: string): Promise<{\n    status: string;\n    count: number;\n  }[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserRole(id: string, role: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserProfileImage(id: string, profileImageUrl: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ profileImageUrl, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserDetails(id: string, data: { firstName?: string; lastName?: string }): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getArtistProfile(userId: string): Promise<ArtistProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(artistProfiles)\n      .where(eq(artistProfiles.userId, userId));\n    return profile;\n  }\n\n  async createOrUpdateArtistProfile(\n    data: Omit<InsertArtistProfile, \"userId\">,\n    userId: string\n  ): Promise<ArtistProfile> {\n    const existing = await this.getArtistProfile(userId);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(artistProfiles)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(artistProfiles.userId, userId))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(artistProfiles)\n        .values({ ...data, userId })\n        .returning();\n      return created;\n    }\n  }\n\n  async getArtistProfiles(): Promise<ArtistProfile[]> {\n    return await db.select().from(artistProfiles).orderBy(desc(artistProfiles.createdAt));\n  }\n\n  async getArtistProfileById(id: string): Promise<ArtistProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(artistProfiles)\n      .where(eq(artistProfiles.id, id));\n    return profile;\n  }\n\n  async getLabelProfile(userId: string): Promise<LabelProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(labelProfiles)\n      .where(eq(labelProfiles.userId, userId));\n    return profile;\n  }\n\n  async createOrUpdateLabelProfile(\n    data: Omit<InsertLabelProfile, \"userId\">,\n    userId: string\n  ): Promise<LabelProfile> {\n    const existing = await this.getLabelProfile(userId);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(labelProfiles)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(labelProfiles.userId, userId))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(labelProfiles)\n        .values({ ...data, userId })\n        .returning();\n      return created;\n    }\n  }\n\n  async getLabelProfiles(): Promise<LabelProfile[]> {\n    return await db.select().from(labelProfiles).orderBy(desc(labelProfiles.createdAt));\n  }\n\n  async getLabelProfileById(id: string): Promise<LabelProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(labelProfiles)\n      .where(eq(labelProfiles.id, id));\n    return profile;\n  }\n\n  async createOpportunity(data: InsertOpportunity): Promise<Opportunity> {\n    const [opportunity] = await db\n      .insert(opportunities)\n      .values(data)\n      .returning();\n    return opportunity;\n  }\n\n  async getOpportunities(): Promise<Opportunity[]> {\n    return await db.select().from(opportunities).orderBy(desc(opportunities.createdAt));\n  }\n\n  async getOpportunityById(id: string): Promise<Opportunity | undefined> {\n    const [opportunity] = await db\n      .select()\n      .from(opportunities)\n      .where(eq(opportunities.id, id));\n    return opportunity;\n  }\n\n  async getOpportunitiesByLabel(labelId: string): Promise<Opportunity[]> {\n    return await db\n      .select()\n      .from(opportunities)\n      .where(eq(opportunities.labelId, labelId))\n      .orderBy(desc(opportunities.createdAt));\n  }\n\n  async createProject(data: InsertProject): Promise<Project> {\n    const [project] = await db\n      .insert(projects)\n      .values(data)\n      .returning();\n    return project;\n  }\n\n  async getProjects(): Promise<Project[]> {\n    return await db.select().from(projects).orderBy(desc(projects.createdAt));\n  }\n\n  async getProjectById(id: string): Promise<Project | undefined> {\n    const [project] = await db\n      .select()\n      .from(projects)\n      .where(eq(projects.id, id));\n    return project;\n  }\n\n  async getProjectsByArtist(artistId: string): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects)\n      .where(eq(projects.artistId, artistId))\n      .orderBy(desc(projects.createdAt));\n  }\n\n  async createApplication(data: InsertApplication): Promise<Application> {\n    const [application] = await db\n      .insert(applications)\n      .values(data)\n      .returning();\n    return application;\n  }\n\n  async getApplicationsByOpportunity(opportunityId: string): Promise<Application[]> {\n    return await db\n      .select()\n      .from(applications)\n      .where(eq(applications.opportunityId, opportunityId))\n      .orderBy(desc(applications.createdAt));\n  }\n\n  async getApplicationsByArtist(artistId: string): Promise<Application[]> {\n    return await db\n      .select()\n      .from(applications)\n      .where(eq(applications.artistId, artistId))\n      .orderBy(desc(applications.createdAt));\n  }\n\n  async updateApplicationStatus(id: string, status: string): Promise<Application> {\n    const [application] = await db\n      .update(applications)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(applications.id, id))\n      .returning();\n    return application;\n  }\n\n  async getOrCreateConversation(user1Id: string, user2Id: string): Promise<Conversation> {\n    const existing = await db\n      .select()\n      .from(conversations)\n      .where(\n        or(\n          and(\n            eq(conversations.participant1Id, user1Id),\n            eq(conversations.participant2Id, user2Id)\n          ),\n          and(\n            eq(conversations.participant1Id, user2Id),\n            eq(conversations.participant2Id, user1Id)\n          )\n        )\n      );\n    \n    if (existing.length > 0) {\n      return existing[0];\n    }\n\n    const [conversation] = await db\n      .insert(conversations)\n      .values({\n        participant1Id: user1Id,\n        participant2Id: user2Id,\n      })\n      .returning();\n    return conversation;\n  }\n\n  async getConversationsByUser(userId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(\n        or(\n          eq(conversations.participant1Id, userId),\n          eq(conversations.participant2Id, userId)\n        )\n      )\n      .orderBy(desc(conversations.lastMessageAt));\n  }\n\n  async sendMessage(data: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(data)\n      .returning();\n\n    await db\n      .update(conversations)\n      .set({ lastMessageAt: new Date() })\n      .where(eq(conversations.id, data.conversationId));\n\n    return message;\n  }\n\n  async getMessagesByConversation(conversationId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async markMessageAsRead(messageId: string): Promise<Message> {\n    const [message] = await db\n      .update(messages)\n      .set({ read: 1 })\n      .where(eq(messages.id, messageId))\n      .returning();\n    return message;\n  }\n\n  async createNotification(data: InsertNotification): Promise<Notification> {\n    const [notification] = await db\n      .insert(notifications)\n      .values(data)\n      .returning();\n    return notification;\n  }\n\n  async getNotificationsByUser(userId: string, limit: number = 50): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt))\n      .limit(limit);\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(notifications)\n      .where(and(\n        eq(notifications.userId, userId),\n        eq(notifications.read, 0)\n      ));\n    return Number(result[0]?.count || 0);\n  }\n\n  async markNotificationAsRead(notificationId: string, userId: string): Promise<Notification | undefined> {\n    const [notification] = await db\n      .update(notifications)\n      .set({ read: 1 })\n      .where(and(\n        eq(notifications.id, notificationId),\n        eq(notifications.userId, userId)\n      ))\n      .returning();\n    return notification;\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ read: 1 })\n      .where(eq(notifications.userId, userId));\n  }\n\n  async getUserPreferences(userId: string): Promise<UserPreferences | undefined> {\n    const [prefs] = await db\n      .select()\n      .from(userPreferences)\n      .where(eq(userPreferences.userId, userId));\n    return prefs;\n  }\n\n  async createOrUpdateUserPreferences(data: Omit<InsertUserPreferences, \"userId\">, userId: string): Promise<UserPreferences> {\n    const existing = await this.getUserPreferences(userId);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(userPreferences)\n        .set({ ...data, updatedAt: new Date() })\n        .where(eq(userPreferences.userId, userId))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(userPreferences)\n        .values({ ...data, userId })\n        .returning();\n      return created;\n    }\n  }\n\n  async getOpportunityAnalytics(labelId: string): Promise<{\n    opportunityId: string;\n    title: string;\n    totalApplications: number;\n    pendingApplications: number;\n    acceptedApplications: number;\n    rejectedApplications: number;\n    acceptanceRate: number;\n    createdAt: Date | null;\n  }[]> {\n    const results = await db\n      .select({\n        opportunityId: opportunities.id,\n        title: opportunities.title,\n        createdAt: opportunities.createdAt,\n        totalApplications: sql<number>`count(${applications.id})`,\n        pendingApplications: sql<number>`sum(case when ${applications.status} = 'pending' then 1 else 0 end)`,\n        acceptedApplications: sql<number>`sum(case when ${applications.status} = 'accepted' then 1 else 0 end)`,\n        rejectedApplications: sql<number>`sum(case when ${applications.status} = 'rejected' then 1 else 0 end)`,\n      })\n      .from(opportunities)\n      .leftJoin(applications, eq(opportunities.id, applications.opportunityId))\n      .where(eq(opportunities.labelId, labelId))\n      .groupBy(opportunities.id, opportunities.title, opportunities.createdAt);\n\n    return results.map((row) => ({\n      opportunityId: row.opportunityId,\n      title: row.title,\n      totalApplications: Number(row.totalApplications),\n      pendingApplications: Number(row.pendingApplications),\n      acceptedApplications: Number(row.acceptedApplications),\n      rejectedApplications: Number(row.rejectedApplications),\n      acceptanceRate: Number(row.totalApplications) > 0 \n        ? Math.round((Number(row.acceptedApplications) / Number(row.totalApplications)) * 100)\n        : 0,\n      createdAt: row.createdAt,\n    }));\n  }\n\n  async getApplicationStatusBreakdown(labelId: string): Promise<{\n    status: string;\n    count: number;\n  }[]> {\n    const results = await db\n      .select({\n        status: applications.status,\n        count: sql<number>`count(*)`,\n      })\n      .from(applications)\n      .innerJoin(opportunities, eq(applications.opportunityId, opportunities.id))\n      .where(eq(opportunities.labelId, labelId))\n      .groupBy(applications.status);\n\n    return results.map((row) => ({\n      status: row.status,\n      count: Number(row.count),\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":16257},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/MediaPlayer.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Play, Pause, Volume2, VolumeX } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface AudioPlayerProps {\n  src: string;\n  title?: string;\n}\n\nexport function AudioPlayer({ src, title }: AudioPlayerProps) {\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isMuted, setIsMuted] = useState(false);\n\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const updateTime = () => setCurrentTime(audio.currentTime);\n    const updateDuration = () => setDuration(audio.duration);\n    const handleEnded = () => setIsPlaying(false);\n\n    audio.addEventListener('timeupdate', updateTime);\n    audio.addEventListener('loadedmetadata', updateDuration);\n    audio.addEventListener('ended', handleEnded);\n\n    return () => {\n      audio.removeEventListener('timeupdate', updateTime);\n      audio.removeEventListener('loadedmetadata', updateDuration);\n      audio.removeEventListener('ended', handleEnded);\n    };\n  }, []);\n\n  const togglePlay = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const handleSeek = (value: number[]) => {\n    if (audioRef.current) {\n      audioRef.current.currentTime = value[0];\n      setCurrentTime(value[0]);\n    }\n  };\n\n  const handleVolumeChange = (value: number[]) => {\n    const newVolume = value[0];\n    setVolume(newVolume);\n    if (audioRef.current) {\n      audioRef.current.volume = newVolume;\n    }\n    if (newVolume === 0) {\n      setIsMuted(true);\n    } else {\n      setIsMuted(false);\n    }\n  };\n\n  const toggleMute = () => {\n    if (audioRef.current) {\n      if (isMuted) {\n        audioRef.current.volume = volume || 0.5;\n        setIsMuted(false);\n      } else {\n        audioRef.current.volume = 0;\n        setIsMuted(true);\n      }\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    if (isNaN(seconds)) return \"0:00\";\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <Card className=\"p-4\">\n      <audio ref={audioRef} src={src} preload=\"metadata\" />\n      \n      {title && (\n        <div className=\"mb-3\">\n          <p className=\"font-medium text-sm\">{title}</p>\n        </div>\n      )}\n\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={togglePlay}\n            data-testid=\"button-audio-play-pause\"\n          >\n            {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\n          </Button>\n\n          <div className=\"flex-1\">\n            <Slider\n              value={[currentTime]}\n              max={duration || 100}\n              step={0.1}\n              onValueChange={handleSeek}\n              data-testid=\"slider-audio-seek\"\n            />\n          </div>\n\n          <span className=\"text-sm text-muted-foreground min-w-[80px] text-right\">\n            {formatTime(currentTime)} / {formatTime(duration)}\n          </span>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={toggleMute}\n            data-testid=\"button-audio-mute\"\n          >\n            {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n          </Button>\n          <div className=\"w-24\">\n            <Slider\n              value={[isMuted ? 0 : volume]}\n              max={1}\n              step={0.01}\n              onValueChange={handleVolumeChange}\n              data-testid=\"slider-audio-volume\"\n            />\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\ninterface VideoPlayerProps {\n  src: string;\n  title?: string;\n  poster?: string;\n}\n\nexport function VideoPlayer({ src, title, poster }: VideoPlayerProps) {\n  return (\n    <Card className=\"overflow-hidden\">\n      {title && (\n        <div className=\"p-3 border-b\">\n          <p className=\"font-medium text-sm\">{title}</p>\n        </div>\n      )}\n      <div className=\"relative aspect-video bg-black\">\n        <video\n          src={src}\n          poster={poster}\n          controls\n          className=\"w-full h-full\"\n          data-testid=\"video-player\"\n        >\n          Your browser does not support the video tag.\n        </video>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4832},"client/src/components/ProjectMediaDisplay.tsx":{"content":"import { Music, Play, Video } from \"lucide-react\";\nimport type { Project } from \"@shared/schema\";\n\ninterface ProjectMediaDisplayProps {\n  project: Pick<Project, \"mediaUrl\" | \"mediaType\" | \"title\">;\n  showControls?: boolean;\n}\n\nexport function ProjectMediaDisplay({ project, showControls = false }: ProjectMediaDisplayProps) {\n  const { mediaUrl, mediaType, title } = project;\n\n  if (!mediaUrl) {\n    return (\n      <div className=\"flex h-full items-center justify-center bg-muted\">\n        <Music className=\"h-12 w-12 text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  switch (mediaType) {\n    case 'audio':\n      return (\n        <div className=\"flex h-full flex-col items-center justify-center bg-gradient-to-br from-primary/20 to-primary/5 p-6\">\n          <div className=\"rounded-full bg-primary/10 p-6\">\n            <Music className=\"h-12 w-12 text-primary\" />\n          </div>\n          {showControls && (\n            <div className=\"mt-4 w-full\">\n              <audio \n                src={mediaUrl} \n                controls \n                className=\"w-full\"\n                data-testid=\"audio-preview\"\n              >\n                Your browser does not support the audio tag.\n              </audio>\n            </div>\n          )}\n        </div>\n      );\n\n    case 'video':\n      if (showControls) {\n        return (\n          <div className=\"relative h-full bg-black\">\n            <video\n              src={mediaUrl}\n              controls\n              className=\"h-full w-full object-contain\"\n              data-testid=\"video-preview\"\n            >\n              Your browser does not support the video tag.\n            </video>\n          </div>\n        );\n      }\n      return (\n        <div className=\"relative h-full bg-black group\">\n          <video\n            src={mediaUrl}\n            className=\"h-full w-full object-cover\"\n            muted\n            loop\n            playsInline\n          />\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black/40\">\n            <div className=\"rounded-full bg-white/90 p-4\">\n              <Play className=\"h-8 w-8 text-black\" />\n            </div>\n          </div>\n        </div>\n      );\n\n    case 'image':\n    default:\n      return (\n        <img\n          src={mediaUrl}\n          alt={title}\n          className=\"h-full w-full object-cover\"\n        />\n      );\n  }\n}\n","size_bytes":2367},"client/src/pages/messages.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Send, MessageSquare } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { User, Conversation, Message } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { AppHeader } from \"@/components/AppHeader\";\n\ntype ConversationWithUser = Conversation & {\n  otherUser: User;\n};\n\nexport default function Messages() {\n  const { user } = useAuth();\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);\n  const [messageContent, setMessageContent] = useState(\"\");\n\n  // Check URL params for conversation ID\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const conversationId = params.get(\"conversation\");\n    if (conversationId) {\n      setSelectedConversation(conversationId);\n    }\n  }, []);\n\n  const { data: conversations, isLoading: conversationsLoading } = useQuery<ConversationWithUser[]>({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  const { data: messages, isLoading: messagesLoading } = useQuery<Message[]>({\n    queryKey: [\"/api/messages\", selectedConversation],\n    enabled: !!selectedConversation,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { conversationId: string; content: string }) => {\n      return await apiRequest(\"POST\", \"/api/messages\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\", selectedConversation] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setMessageContent(\"\");\n    },\n  });\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!messageContent.trim() || !selectedConversation) return;\n    \n    sendMessageMutation.mutate({\n      conversationId: selectedConversation,\n      content: messageContent,\n    });\n  };\n\n  const getUserInitials = (u: User | undefined) => {\n    if (!u) return \"U\";\n    if (u.firstName && u.lastName) {\n      return `${u.firstName[0]}${u.lastName[0]}`;\n    }\n    return u.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  const selectedConv = conversations?.find(c => c.id === selectedConversation);\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <AppHeader />\n      <div className=\"flex flex-1 overflow-hidden\">\n        <div className=\"w-80 border-r\">\n        <div className=\"p-4 border-b\">\n          <h2 className=\"text-lg font-semibold\">Messages</h2>\n        </div>\n        <ScrollArea className=\"h-[calc(100vh-8rem)]\">\n          {conversationsLoading ? (\n            <div className=\"p-4 space-y-3\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"flex items-center gap-3\">\n                  <Skeleton className=\"h-12 w-12 rounded-full\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <Skeleton className=\"h-4 w-32\" />\n                    <Skeleton className=\"h-3 w-48\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : conversations && conversations.length > 0 ? (\n            <div className=\"p-2\">\n              {conversations.map((conv) => (\n                <button\n                  key={conv.id}\n                  onClick={() => setSelectedConversation(conv.id)}\n                  className={`w-full p-3 flex items-center gap-3 rounded-lg hover-elevate active-elevate-2 text-left ${\n                    selectedConversation === conv.id ? \"bg-accent\" : \"\"\n                  }`}\n                  data-testid={`conversation-${conv.id}`}\n                >\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={conv.otherUser.profileImageUrl || undefined} />\n                    <AvatarFallback>{getUserInitials(conv.otherUser)}</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-medium truncate\">\n                      {conv.otherUser.firstName} {conv.otherUser.lastName}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground truncate\">\n                      {conv.lastMessageAt ? formatDistanceToNow(new Date(conv.lastMessageAt), { addSuffix: true }) : \"No messages\"}\n                    </p>\n                  </div>\n                </button>\n              ))}\n            </div>\n          ) : (\n            <div className=\"flex flex-col items-center justify-center h-64 text-center px-4\">\n              <MessageSquare className=\"h-12 w-12 text-muted-foreground mb-3\" />\n              <p className=\"text-muted-foreground\">No conversations yet</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Start a conversation from a user profile\n              </p>\n            </div>\n          )}\n        </ScrollArea>\n        </div>\n\n        <div className=\"flex-1 flex flex-col\">\n        {selectedConv ? (\n          <>\n            <div className=\"p-4 border-b flex items-center gap-3\">\n              <Avatar className=\"h-10 w-10\">\n                <AvatarImage src={selectedConv.otherUser.profileImageUrl || undefined} />\n                <AvatarFallback>{getUserInitials(selectedConv.otherUser)}</AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"font-medium\">\n                  {selectedConv.otherUser.firstName} {selectedConv.otherUser.lastName}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">{selectedConv.otherUser.email}</p>\n              </div>\n            </div>\n\n            <ScrollArea className=\"flex-1 p-4\">\n              {messagesLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map(i => (\n                    <div key={i} className=\"flex gap-3\">\n                      <Skeleton className=\"h-8 w-8 rounded-full\" />\n                      <Skeleton className=\"h-16 w-64\" />\n                    </div>\n                  ))}\n                </div>\n              ) : messages && messages.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {messages.map((message) => {\n                    const isOwn = message.senderId === user?.id;\n                    return (\n                      <div\n                        key={message.id}\n                        className={`flex gap-3 ${isOwn ? \"flex-row-reverse\" : \"\"}`}\n                        data-testid={`message-${message.id}`}\n                      >\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarImage\n                            src={isOwn ? user?.profileImageUrl || undefined : selectedConv.otherUser.profileImageUrl || undefined}\n                          />\n                          <AvatarFallback>\n                            {isOwn ? getUserInitials(user) : getUserInitials(selectedConv.otherUser)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className={`flex flex-col gap-1 max-w-md ${isOwn ? \"items-end\" : \"\"}`}>\n                          <Card className={`p-3 ${isOwn ? \"bg-primary text-primary-foreground\" : \"\"}`}>\n                            <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                          </Card>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {formatDistanceToNow(new Date(message.createdAt!), { addSuffix: true })}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-full text-center\">\n                  <MessageSquare className=\"h-16 w-16 text-muted-foreground mb-3\" />\n                  <p className=\"text-muted-foreground\">No messages yet</p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">Send a message to start the conversation</p>\n                </div>\n              )}\n            </ScrollArea>\n\n            <form onSubmit={handleSendMessage} className=\"p-4 border-t\">\n              <div className=\"flex gap-2\">\n                <Input\n                  value={messageContent}\n                  onChange={(e) => setMessageContent(e.target.value)}\n                  placeholder=\"Type a message...\"\n                  className=\"flex-1\"\n                  data-testid=\"input-message\"\n                />\n                <Button\n                  type=\"submit\"\n                  size=\"icon\"\n                  disabled={!messageContent.trim() || sendMessageMutation.isPending}\n                  data-testid=\"button-send-message\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </form>\n          </>\n        ) : (\n          <div className=\"flex flex-col items-center justify-center h-full text-center px-4\">\n            <MessageSquare className=\"h-20 w-20 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Select a conversation</h3>\n            <p className=\"text-muted-foreground\">\n              Choose a conversation from the left to start messaging\n            </p>\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9754},"client/src/components/NotificationBell.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Check, CheckCheck, CheckCircle2, XCircle, FileText, MessageSquare, Target } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Notification } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nexport function NotificationBell() {\n  const [open, setOpen] = useState(false);\n\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  const { data: unreadData } = useQuery<{ count: number }>({\n    queryKey: [\"/api/notifications/unread-count\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      return await apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n  });\n\n  const markAllReadMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/notifications/mark-all-read\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n  });\n\n  const unreadCount = unreadData?.count || 0;\n\n  const getNotificationIcon = (type: string) => {\n    const iconClass = \"h-5 w-5\";\n    switch (type) {\n      case 'application_accepted':\n        return <CheckCircle2 className={`${iconClass} text-green-500`} />;\n      case 'application_rejected':\n        return <XCircle className={`${iconClass} text-red-500`} />;\n      case 'application_submitted':\n        return <FileText className={`${iconClass} text-blue-500`} />;\n      case 'new_message':\n        return <MessageSquare className={`${iconClass} text-purple-500`} />;\n      case 'new_opportunity':\n        return <Target className={`${iconClass} text-orange-500`} />;\n      default:\n        return <Bell className={`${iconClass} text-muted-foreground`} />;\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"relative\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge\n              variant=\"destructive\"\n              className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n            >\n              {unreadCount > 9 ? '9+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" align=\"end\">\n        <div className=\"flex items-center justify-between p-4 border-b\">\n          <h3 className=\"font-semibold\">Notifications</h3>\n          {unreadCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => markAllReadMutation.mutate()}\n              disabled={markAllReadMutation.isPending}\n              data-testid=\"button-mark-all-read\"\n            >\n              <CheckCheck className=\"h-4 w-4 mr-1\" />\n              Mark all read\n            </Button>\n          )}\n        </div>\n        <ScrollArea className=\"h-96\">\n          {isLoading ? (\n            <div className=\"p-4 text-center text-sm text-muted-foreground\">\n              Loading notifications...\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"p-8 text-center\">\n              <Bell className=\"h-12 w-12 mx-auto mb-3 text-muted-foreground\" />\n              <p className=\"text-sm text-muted-foreground\">No notifications yet</p>\n            </div>\n          ) : (\n            <div className=\"divide-y\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`p-4 hover-elevate cursor-pointer ${\n                    notification.read === 0 ? \"bg-accent/50\" : \"\"\n                  }`}\n                  onClick={() => {\n                    if (notification.read === 0) {\n                      markAsReadMutation.mutate(notification.id);\n                    }\n                  }}\n                  data-testid={`notification-${notification.id}`}\n                >\n                  <div className=\"flex gap-3\">\n                    <div className=\"flex-shrink-0 mt-1\">\n                      {getNotificationIcon(notification.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <p className=\"font-medium text-sm\">{notification.title}</p>\n                        {notification.read === 0 && (\n                          <div className=\"h-2 w-2 rounded-full bg-primary flex-shrink-0 mt-1\" />\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        {formatDistanceToNow(new Date(notification.createdAt!), {\n                          addSuffix: true,\n                        })}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </PopoverContent>\n    </Popover>\n  );\n}\n","size_bytes":6017},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft, User, Bell, Lock, LogIn, LogOut } from \"lucide-react\";\nimport { SimpleUploader } from \"@/components/SimpleUploader\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { UserPreferences } from \"@shared/schema\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [profileImageUrl, setProfileImageUrl] = useState(\"\");\n\n  const { data: preferences } = useQuery<UserPreferences>({\n    queryKey: [\"/api/preferences\"],\n  });\n\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [applicationNotifications, setApplicationNotifications] = useState(true);\n  const [messageNotifications, setMessageNotifications] = useState(true);\n  const [opportunityNotifications, setOpportunityNotifications] = useState(true);\n  const [profileVisibility, setProfileVisibility] = useState<string>(\"public\");\n\n  useEffect(() => {\n    if (user) {\n      setFirstName(user.firstName || \"\");\n      setLastName(user.lastName || \"\");\n      setEmail(user.email || \"\");\n      setProfileImageUrl(user.profileImageUrl || \"\");\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (preferences) {\n      setEmailNotifications(preferences.emailNotifications === 1);\n      setApplicationNotifications(preferences.applicationNotifications === 1);\n      setMessageNotifications(preferences.messageNotifications === 1);\n      setOpportunityNotifications(preferences.opportunityNotifications === 1);\n      setProfileVisibility(preferences.profileVisibility || \"public\");\n    }\n  }, [preferences]);\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (data: { firstName: string; lastName: string }) => {\n      return await apiRequest(\"PATCH\", \"/api/auth/user\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"Account updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (data: Partial<UserPreferences>) => {\n      return await apiRequest(\"POST\", \"/api/preferences\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/preferences\"] });\n      toast({\n        title: \"Success\",\n        description: \"Preferences updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveAccount = () => {\n    updateUserMutation.mutate({\n      firstName,\n      lastName,\n    });\n  };\n\n  const handleSaveNotifications = () => {\n    updatePreferencesMutation.mutate({\n      emailNotifications: emailNotifications ? 1 : 0,\n      applicationNotifications: applicationNotifications ? 1 : 0,\n      messageNotifications: messageNotifications ? 1 : 0,\n      opportunityNotifications: opportunityNotifications ? 1 : 0,\n    });\n  };\n\n  const handleSavePrivacy = () => {\n    updatePreferencesMutation.mutate({\n      profileVisibility,\n    });\n  };\n\n  const handleProfileImageComplete = async (uploadURL: string) => {\n    try {\n      const response: any = await apiRequest(\"PUT\", \"/api/profile/image\", {\n        imageURL: uploadURL,\n      });\n      setProfileImageUrl(response.imagePath);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"Profile image updated successfully\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation(\"/\")} data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"font-serif text-3xl font-bold\">Settings</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage your account and preferences\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8\">\n        <Tabs defaultValue=\"account\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"tabs-list\">\n            <TabsTrigger value=\"account\" data-testid=\"tab-account\">\n              <User className=\"mr-2 h-4 w-4\" />\n              Account\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n              <Bell className=\"mr-2 h-4 w-4\" />\n              Notifications\n            </TabsTrigger>\n            <TabsTrigger value=\"privacy\" data-testid=\"tab-privacy\">\n              <Lock className=\"mr-2 h-4 w-4\" />\n              Privacy\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"account\" className=\"space-y-6\">\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold mb-4\">Account Information</h2>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    disabled\n                    className=\"mt-2\"\n                    data-testid=\"input-email\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Email cannot be changed\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={firstName}\n                    onChange={(e) => setFirstName(e.target.value)}\n                    className=\"mt-2\"\n                    data-testid=\"input-first-name\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={lastName}\n                    onChange={(e) => setLastName(e.target.value)}\n                    className=\"mt-2\"\n                    data-testid=\"input-last-name\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Profile Image</Label>\n                  <div className=\"mt-2 flex items-center gap-4\">\n                    {profileImageUrl && (\n                      <img\n                        src={profileImageUrl}\n                        alt=\"Profile\"\n                        className=\"h-16 w-16 rounded-full object-cover\"\n                      />\n                    )}\n                    <SimpleUploader\n                      onUploadComplete={handleProfileImageComplete}\n                      accept=\"image/*\"\n                      data-testid=\"button-upload-profile-image\"\n                    >\n                      Change Image\n                    </SimpleUploader>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-6 flex justify-end\">\n                <Button\n                  onClick={handleSaveAccount}\n                  disabled={updateUserMutation.isPending}\n                  data-testid=\"button-save-account\"\n                >\n                  {updateUserMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold mb-4\">Authentication</h2>\n              <p className=\"text-sm text-muted-foreground mb-6\">\n                Manage your login sessions\n              </p>\n              <div className=\"flex items-center gap-4\">\n                <Button\n                  variant=\"outline\"\n                  asChild\n                  data-testid=\"button-login\"\n                >\n                  <a href=\"/api/login\">\n                    <LogIn className=\"mr-2 h-4 w-4\" />\n                    Login Again\n                  </a>\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  asChild\n                  data-testid=\"button-logout\"\n                >\n                  <a href=\"/api/logout\">\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Logout\n                  </a>\n                </Button>\n              </div>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold mb-4\">Notification Preferences</h2>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label htmlFor=\"email-notifications\">Email Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Receive notifications via email\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"email-notifications\"\n                    checked={emailNotifications}\n                    onCheckedChange={setEmailNotifications}\n                    data-testid=\"switch-email-notifications\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label htmlFor=\"application-notifications\">Application Updates</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Get notified about application status changes\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"application-notifications\"\n                    checked={applicationNotifications}\n                    onCheckedChange={setApplicationNotifications}\n                    data-testid=\"switch-application-notifications\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label htmlFor=\"message-notifications\">New Messages</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Get notified when you receive new messages\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"message-notifications\"\n                    checked={messageNotifications}\n                    onCheckedChange={setMessageNotifications}\n                    data-testid=\"switch-message-notifications\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label htmlFor=\"opportunity-notifications\">New Opportunities</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Get notified about new collaboration opportunities\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"opportunity-notifications\"\n                    checked={opportunityNotifications}\n                    onCheckedChange={setOpportunityNotifications}\n                    data-testid=\"switch-opportunity-notifications\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"mt-6 flex justify-end\">\n                <Button\n                  onClick={handleSaveNotifications}\n                  disabled={updatePreferencesMutation.isPending}\n                  data-testid=\"button-save-notifications\"\n                >\n                  {updatePreferencesMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"privacy\" className=\"space-y-6\">\n            <Card className=\"p-6\">\n              <h2 className=\"font-serif text-xl font-semibold mb-4\">Privacy Settings</h2>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"profile-visibility\">Profile Visibility</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1 mb-2\">\n                    Control who can view your profile\n                  </p>\n                  <Select\n                    value={profileVisibility}\n                    onValueChange={setProfileVisibility}\n                  >\n                    <SelectTrigger className=\"w-full\" data-testid=\"select-profile-visibility\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"public\" data-testid=\"option-public\">\n                        Public - Anyone can view your profile\n                      </SelectItem>\n                      <SelectItem value=\"private\" data-testid=\"option-private\">\n                        Private - Only you can view your profile\n                      </SelectItem>\n                      <SelectItem value=\"connections\" data-testid=\"option-connections\">\n                        Connections Only - Only people you've connected with\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"mt-6 flex justify-end\">\n                <Button\n                  onClick={handleSavePrivacy}\n                  disabled={updatePreferencesMutation.isPending}\n                  data-testid=\"button-save-privacy\"\n                >\n                  {updatePreferencesMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15968},"client/src/pages/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { TrendingUp, Users, CheckCircle, XCircle, Clock } from \"lucide-react\";\n\ntype OpportunityAnalytics = {\n  opportunityId: string;\n  title: string;\n  totalApplications: number;\n  pendingApplications: number;\n  acceptedApplications: number;\n  rejectedApplications: number;\n  acceptanceRate: number;\n  createdAt: Date | null;\n};\n\ntype ApplicationBreakdown = {\n  status: string;\n  count: number;\n};\n\nconst COLORS = {\n  pending: \"hsl(var(--chart-1))\",\n  accepted: \"hsl(var(--chart-2))\",\n  rejected: \"hsl(var(--chart-3))\",\n};\n\nexport default function Analytics() {\n  const { data: opportunities, isLoading: isLoadingOpportunities } = useQuery<OpportunityAnalytics[]>({\n    queryKey: [\"/api/analytics/opportunities\"],\n  });\n\n  const { data: breakdown, isLoading: isLoadingBreakdown } = useQuery<ApplicationBreakdown[]>({\n    queryKey: [\"/api/analytics/application-breakdown\"],\n  });\n\n  const totalApplications = breakdown?.reduce((sum, item) => sum + item.count, 0) || 0;\n  const pendingCount = breakdown?.find(b => b.status === 'pending')?.count || 0;\n  const acceptedCount = breakdown?.find(b => b.status === 'accepted')?.count || 0;\n  const rejectedCount = breakdown?.find(b => b.status === 'rejected')?.count || 0;\n\n  const pieData = breakdown?.map(item => ({\n    name: item.status.charAt(0).toUpperCase() + item.status.slice(1),\n    value: item.count,\n    status: item.status,\n  })) || [];\n\n  if (isLoadingOpportunities || isLoadingBreakdown) {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Analytics Dashboard</h1>\n            <p className=\"text-muted-foreground mt-1\">Track your opportunity performance</p>\n          </div>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i}>\n              <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  <Skeleton className=\"h-4 w-24\" />\n                </CardTitle>\n                <Skeleton className=\"h-4 w-4\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-8 w-16\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <Skeleton className=\"h-6 w-48\" />\n            </CardHeader>\n            <CardContent>\n              <Skeleton className=\"h-64 w-full\" />\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <Skeleton className=\"h-6 w-48\" />\n            </CardHeader>\n            <CardContent>\n              <Skeleton className=\"h-64 w-full\" />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\" data-testid=\"page-analytics\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-analytics-title\">Analytics Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">Track your opportunity performance</p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Applications</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-applications\">{totalApplications}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-pending-applications\">{pendingCount}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Accepted</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-accepted-applications\">{acceptedCount}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-rejected-applications\">{rejectedCount}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Opportunity Performance</CardTitle>\n            <CardDescription>Applications per opportunity</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={opportunities}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"title\" \n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={100}\n                  tick={{ fontSize: 12 }}\n                />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"totalApplications\" fill=\"hsl(var(--primary))\" name=\"Total Applications\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Application Status Breakdown</CardTitle>\n            <CardDescription>Distribution of application statuses</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={pieData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {pieData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[entry.status as keyof typeof COLORS]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Detailed Opportunity Metrics</CardTitle>\n          <CardDescription>Complete breakdown of each opportunity</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {opportunities && opportunities.length > 0 ? (\n              opportunities.map((opp) => (\n                <div\n                  key={opp.opportunityId}\n                  className=\"flex items-center justify-between p-4 rounded-md border\"\n                  data-testid={`opportunity-stat-${opp.opportunityId}`}\n                >\n                  <div className=\"space-y-1\">\n                    <h3 className=\"font-semibold\">{opp.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {opp.totalApplications} total applications\n                    </p>\n                  </div>\n                  <div className=\"flex gap-6 text-sm\">\n                    <div className=\"text-center\">\n                      <div className=\"font-bold text-lg\">{opp.pendingApplications}</div>\n                      <div className=\"text-muted-foreground\">Pending</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-bold text-lg\">{opp.acceptedApplications}</div>\n                      <div className=\"text-muted-foreground\">Accepted</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-bold text-lg\">{opp.rejectedApplications}</div>\n                      <div className=\"text-muted-foreground\">Rejected</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"font-bold text-lg flex items-center gap-1\">\n                        {opp.acceptanceRate}%\n                        <TrendingUp className=\"h-4 w-4\" />\n                      </div>\n                      <div className=\"text-muted-foreground\">Rate</div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">\n                No opportunities found. Create your first opportunity to see analytics.\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9918},"client/src/pages/project-detail.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ArrowLeft, User as UserIcon, Music, Video } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ProjectMediaDisplay } from \"@/components/ProjectMediaDisplay\";\nimport type { Project, User as UserType } from \"@shared/schema\";\n\nexport default function ProjectDetail() {\n  const [, params] = useRoute(\"/projects/:id\");\n  const [, setLocation] = useLocation();\n\n  const { data: project, isLoading } = useQuery<\n    Project & {\n      artist: {\n        user: UserType;\n        bio: string | null;\n        location: string | null;\n      };\n    }\n  >({\n    queryKey: [\"/api/projects\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8\">\n          <Skeleton className=\"h-12 w-1/2\" />\n          <Skeleton className=\"mt-4 h-96 w-full\" />\n          <Skeleton className=\"mt-4 h-32 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"p-12 text-center\">\n          <p className=\"text-muted-foreground\">Project not found</p>\n          <Button className=\"mt-4\" onClick={() => setLocation(\"/discover\")}>\n            Back to Discover\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  const getUserInitials = () => {\n    const user = project.artist.user;\n    if (user.firstName && user.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`;\n    }\n    return user.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation(\"/discover\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"flex-1 min-w-0\">\n              <h1 className=\"font-serif text-2xl font-bold sm:text-3xl line-clamp-1\">\n                {project.title}\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                by {project.artist.user.firstName || project.artist.user.email}\n              </p>\n            </div>\n            {project.mediaType && (\n              <Badge variant=\"secondary\" className=\"gap-2\">\n                {project.mediaType === 'audio' && <Music className=\"h-3 w-3\" />}\n                {project.mediaType === 'video' && <Video className=\"h-3 w-3\" />}\n                {project.mediaType}\n              </Badge>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8\">\n        <div className=\"space-y-6\">\n          <Card className=\"overflow-hidden\">\n            <div className=\"relative aspect-video bg-muted\">\n              <ProjectMediaDisplay project={project} showControls={true} />\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-start gap-4\">\n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={project.artist.user.profileImageUrl || undefined} />\n                <AvatarFallback>{getUserInitials()}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <h2 className=\"font-serif text-xl font-semibold\">\n                  {project.artist.user.firstName && project.artist.user.lastName\n                    ? `${project.artist.user.firstName} ${project.artist.user.lastName}`\n                    : project.artist.user.email}\n                </h2>\n                {project.artist.location && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    {project.artist.location}\n                  </p>\n                )}\n                {project.artist.bio && (\n                  <p className=\"mt-2 text-sm text-muted-foreground line-clamp-2\">\n                    {project.artist.bio}\n                  </p>\n                )}\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <h3 className=\"font-serif text-xl font-semibold\">About This Project</h3>\n            <p className=\"mt-4 whitespace-pre-wrap leading-relaxed text-muted-foreground\">\n              {project.description}\n            </p>\n          </Card>\n\n          {project.genres && project.genres.length > 0 && (\n            <Card className=\"p-6\">\n              <h3 className=\"font-serif text-xl font-semibold\">Genres</h3>\n              <div className=\"mt-4 flex flex-wrap gap-2\">\n                {project.genres.map((genre, idx) => (\n                  <Badge key={idx} variant=\"outline\">\n                    {genre}\n                  </Badge>\n                ))}\n              </div>\n            </Card>\n          )}\n\n          {project.mediaDuration && (\n            <Card className=\"p-6\">\n              <h3 className=\"font-serif text-xl font-semibold\">Duration</h3>\n              <p className=\"mt-2 text-muted-foreground\">\n                {Math.floor(project.mediaDuration / 60)}:{String(Math.floor(project.mediaDuration % 60)).padStart(2, '0')}\n              </p>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5836},"client/src/components/AppHeader.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Music,\n  Search,\n  MessageSquare,\n  Briefcase,\n  FileText,\n  FolderOpen,\n  BarChart3,\n  Settings as SettingsIcon,\n  LogOut,\n  Menu,\n  X,\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { NotificationBell } from \"@/components/NotificationBell\";\nimport { useState } from \"react\";\n\nexport function AppHeader() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const getUserInitials = () => {\n    if (!user) return \"U\";\n    if (user.firstName && user.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`;\n    }\n    return user.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\", icon: Music, show: true },\n    { href: \"/discover\", label: \"Discover\", icon: Search, show: true },\n    { href: \"/messages\", label: \"Messages\", icon: MessageSquare, show: true },\n    { href: \"/opportunities/new\", label: \"Post Opportunity\", icon: Briefcase, show: user?.role === \"label\" },\n    { href: \"/applications\", label: \"Applications\", icon: FileText, show: user?.role === \"label\" },\n    { href: \"/analytics\", label: \"Analytics\", icon: BarChart3, show: user?.role === \"label\" },\n    { href: \"/projects/new\", label: \"Share Project\", icon: FolderOpen, show: user?.role === \"artist\" },\n  ].filter(link => link.show);\n\n  return (\n    <header className=\"sticky top-0 z-50 border-b bg-background/95 backdrop-blur\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex h-16 items-center justify-between gap-4\">\n          <Link href=\"/\" className=\"flex items-center gap-2\">\n            <Music className=\"h-7 w-7 text-primary\" />\n            <span className=\"font-serif text-2xl font-bold\">COLZ</span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden items-center gap-2 md:flex\">\n            {navLinks.map((link) => (\n              <Link key={link.href} href={link.href}>\n                <Button\n                  variant={location === link.href ? \"secondary\" : \"ghost\"}\n                  size=\"sm\"\n                  className=\"gap-2\"\n                  data-testid={`link-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <link.icon className=\"h-4 w-4\" />\n                  {link.label}\n                </Button>\n              </Link>\n            ))}\n          </nav>\n\n          {/* Desktop Actions */}\n          <div className=\"hidden items-center gap-2 md:flex\">\n            <NotificationBell />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              asChild\n              data-testid=\"button-settings\"\n            >\n              <Link href=\"/settings\">\n                <SettingsIcon className=\"h-4 w-4\" />\n              </Link>\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              asChild\n              data-testid=\"button-profile\"\n            >\n              <Link href=\"/profile\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src={user?.profileImageUrl || undefined} />\n                  <AvatarFallback>{getUserInitials()}</AvatarFallback>\n                </Avatar>\n              </Link>\n            </Button>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"flex items-center gap-2 md:hidden\">\n            <NotificationBell />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {mobileMenuOpen && (\n          <div className=\"border-t py-4 md:hidden\">\n            <nav className=\"space-y-2\">\n              {navLinks.map((link) => (\n                <Link key={link.href} href={link.href}>\n                  <Button\n                    variant={location === link.href ? \"secondary\" : \"ghost\"}\n                    className=\"w-full justify-start gap-2\"\n                    onClick={() => setMobileMenuOpen(false)}\n                    data-testid={`link-mobile-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <link.icon className=\"h-4 w-4\" />\n                    {link.label}\n                  </Button>\n                </Link>\n              ))}\n              <Link href=\"/settings\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start gap-2\"\n                  onClick={() => setMobileMenuOpen(false)}\n                  data-testid=\"link-mobile-settings\"\n                >\n                  <SettingsIcon className=\"h-4 w-4\" />\n                  Settings\n                </Button>\n              </Link>\n              <Link href=\"/profile\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start gap-2\"\n                  onClick={() => setMobileMenuOpen(false)}\n                  data-testid=\"link-mobile-profile\"\n                >\n                  <Avatar className=\"h-4 w-4\">\n                    <AvatarImage src={user?.profileImageUrl || undefined} />\n                    <AvatarFallback className=\"text-xs\">{getUserInitials()}</AvatarFallback>\n                  </Avatar>\n                  Profile\n                </Button>\n              </Link>\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":5866},"client/src/pages/signup.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Music, Building2, CheckCircle2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function Signup() {\n  const [step, setStep] = useState<\"info\" | \"role\">(\"info\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState<\"artist\" | \"label\" | null>(null);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (data: { firstName: string; lastName: string }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/user\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      setStep(\"role\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const selectRoleMutation = useMutation({\n    mutationFn: async (role: \"artist\" | \"label\") => {\n      const response = await apiRequest(\"POST\", \"/api/users/role\", { role });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInfoSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (firstName.trim() && lastName.trim()) {\n      updateUserMutation.mutate({ firstName, lastName });\n    }\n  };\n\n  const handleRoleSubmit = () => {\n    if (selectedRole) {\n      selectRoleMutation.mutate(selectedRole);\n    }\n  };\n\n  if (step === \"info\") {\n    return (\n      <div className=\"flex min-h-screen flex-col items-center justify-center bg-background px-4 py-12\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center gap-2 mb-4\">\n              <Music className=\"h-10 w-10 text-primary\" />\n              <span className=\"font-serif text-3xl font-bold\">COLZ</span>\n            </div>\n            <h1 className=\"font-serif text-3xl font-bold sm:text-4xl\">\n              Welcome to COLZ\n            </h1>\n            <p className=\"mt-2 text-lg text-muted-foreground\">\n              Let's get to know you\n            </p>\n          </div>\n\n          <Card className=\"p-8\">\n            <form onSubmit={handleInfoSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  value={firstName}\n                  onChange={(e) => setFirstName(e.target.value)}\n                  placeholder=\"Enter your first name\"\n                  required\n                  data-testid=\"input-first-name\"\n                  autoFocus\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  value={lastName}\n                  onChange={(e) => setLastName(e.target.value)}\n                  placeholder=\"Enter your last name\"\n                  required\n                  data-testid=\"input-last-name\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                size=\"lg\"\n                disabled={!firstName.trim() || !lastName.trim() || updateUserMutation.isPending}\n                data-testid=\"button-continue-info\"\n              >\n                {updateUserMutation.isPending ? \"Saving...\" : \"Continue\"}\n              </Button>\n            </form>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-background px-4 py-12\">\n      <div className=\"w-full max-w-4xl\">\n        <div className=\"text-center\">\n          <h1 className=\"font-serif text-3xl font-bold sm:text-4xl\">\n            Welcome, {firstName}!\n          </h1>\n          <p className=\"mt-2 text-lg text-muted-foreground\">\n            Choose your role to get started\n          </p>\n        </div>\n\n        <div className=\"mt-12 grid gap-6 sm:grid-cols-2\">\n          <Card\n            className={`cursor-pointer p-8 transition-all hover-elevate ${\n              selectedRole === \"artist\" ? \"ring-2 ring-primary\" : \"\"\n            }`}\n            onClick={() => setSelectedRole(\"artist\")}\n            data-testid=\"card-role-artist\"\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                <Music className=\"h-6 w-6 text-primary\" />\n              </div>\n              {selectedRole === \"artist\" && (\n                <CheckCircle2 className=\"h-6 w-6 text-primary\" data-testid=\"icon-selected-artist\" />\n              )}\n            </div>\n            <h2 className=\"mt-4 font-serif text-2xl font-semibold\">\n              I'm an Artist\n            </h2>\n            <p className=\"mt-2 leading-relaxed text-muted-foreground\">\n              Showcase your portfolio, find collaboration opportunities, \n              and connect with labels and other artists.\n            </p>\n            <ul className=\"mt-6 space-y-2 text-sm\">\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Create a stunning artist profile</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Upload portfolio samples</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Apply to opportunities</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Share your projects</span>\n              </li>\n            </ul>\n          </Card>\n\n          <Card\n            className={`cursor-pointer p-8 transition-all hover-elevate ${\n              selectedRole === \"label\" ? \"ring-2 ring-primary\" : \"\"\n            }`}\n            onClick={() => setSelectedRole(\"label\")}\n            data-testid=\"card-role-label\"\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                <Building2 className=\"h-6 w-6 text-primary\" />\n              </div>\n              {selectedRole === \"label\" && (\n                <CheckCircle2 className=\"h-6 w-6 text-primary\" data-testid=\"icon-selected-label\" />\n              )}\n            </div>\n            <h2 className=\"mt-4 font-serif text-2xl font-semibold\">\n              I'm a Label\n            </h2>\n            <p className=\"mt-2 leading-relaxed text-muted-foreground\">\n              Post opportunities, discover talented artists, \n              and manage applications all in one place.\n            </p>\n            <ul className=\"mt-6 space-y-2 text-sm\">\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Create a professional label profile</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Post collaboration opportunities</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Browse artist profiles</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle2 className=\"mt-0.5 h-4 w-4 flex-shrink-0 text-primary\" />\n                <span>Manage applications</span>\n              </li>\n            </ul>\n          </Card>\n        </div>\n\n        <div className=\"mt-8 flex justify-center gap-4\">\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            onClick={() => setStep(\"info\")}\n            data-testid=\"button-back\"\n          >\n            Back\n          </Button>\n          <Button\n            size=\"lg\"\n            disabled={!selectedRole || selectRoleMutation.isPending}\n            onClick={handleRoleSubmit}\n            data-testid=\"button-continue-role\"\n          >\n            {selectRoleMutation.isPending ? \"Setting up...\" : \"Get Started\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9369},"client/src/pages/artist-detail.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  ArrowLeft,\n  MapPin,\n  Link as LinkIcon,\n  Music,\n  Briefcase,\n  MessageCircle,\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { ArtistProfile, User as UserType, Project } from \"@shared/schema\";\nimport { ProjectMediaDisplay } from \"@/components/ProjectMediaDisplay\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ArtistDetail() {\n  const [, params] = useRoute(\"/artists/:id\");\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: artist, isLoading: artistLoading } = useQuery<\n    ArtistProfile & { user: UserType }\n  >({\n    queryKey: [\"/api/artists\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  const { data: projects, isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/artists\", params?.id, \"projects\"],\n    enabled: !!params?.id,\n  });\n\n  const startConversationMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/conversations/${artist?.userId}`, undefined);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setLocation(`/messages?conversation=${data.id}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMessage = () => {\n    if (artist) {\n      startConversationMutation.mutate();\n    }\n  };\n\n  if (artistLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"mx-auto max-w-5xl px-4 py-8 sm:px-6 lg:px-8\">\n          <Skeleton className=\"h-12 w-1/3\" />\n          <Skeleton className=\"mt-4 h-24 w-full\" />\n          <Skeleton className=\"mt-8 h-64 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!artist) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"p-12 text-center\">\n          <p className=\"text-muted-foreground\">Artist not found</p>\n          <Button className=\"mt-4\" onClick={() => setLocation(\"/discover\")}>\n            Back to Discover\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  const getUserInitials = () => {\n    if (artist.user.firstName && artist.user.lastName) {\n      return `${artist.user.firstName[0]}${artist.user.lastName[0]}`;\n    }\n    return artist.user.email?.[0]?.toUpperCase() || \"A\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"mx-auto max-w-5xl px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation(\"/discover\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"flex items-center gap-4 flex-1 min-w-0\">\n              <Avatar className=\"h-16 w-16 border-2\">\n                <AvatarImage src={artist.user.profileImageUrl || undefined} />\n                <AvatarFallback>{getUserInitials()}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <h1 className=\"font-serif text-2xl font-bold sm:text-3xl line-clamp-1\">\n                  {artist.user.firstName && artist.user.lastName\n                    ? `${artist.user.firstName} ${artist.user.lastName}`\n                    : artist.user.email}\n                </h1>\n                {artist.location && (\n                  <p className=\"text-sm text-muted-foreground flex items-center gap-1 mt-1\">\n                    <MapPin className=\"h-3 w-3\" />\n                    {artist.location}\n                  </p>\n                )}\n              </div>\n              {user && artist.userId !== user.id && (\n                <Button\n                  onClick={handleMessage}\n                  disabled={startConversationMutation.isPending}\n                  data-testid=\"button-message-artist\"\n                >\n                  <MessageCircle className=\"mr-2 h-4 w-4\" />\n                  {startConversationMutation.isPending ? \"Loading...\" : \"Message\"}\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-5xl px-4 py-8 sm:px-6 lg:px-8\">\n        <div className=\"space-y-8\">\n          <Card className=\"p-6\">\n            <h2 className=\"font-serif text-xl font-semibold mb-4\">About</h2>\n            {artist.bio ? (\n              <p className=\"text-muted-foreground whitespace-pre-wrap\">\n                {artist.bio}\n              </p>\n            ) : (\n              <p className=\"text-muted-foreground italic\">\n                No bio provided yet\n              </p>\n            )}\n\n            {artist.genres && artist.genres.length > 0 && (\n              <div className=\"mt-6\">\n                <h3 className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n                  <Music className=\"h-4 w-4\" />\n                  Genres\n                </h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {artist.genres.map((genre, idx) => (\n                    <Badge key={idx} variant=\"secondary\">\n                      {genre}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {artist.skills && artist.skills.length > 0 && (\n              <div className=\"mt-6\">\n                <h3 className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n                  <Briefcase className=\"h-4 w-4\" />\n                  Skills\n                </h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {artist.skills.map((skill, idx) => (\n                    <Badge key={idx} variant=\"outline\">\n                      {skill}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {artist.website && (\n              <div className=\"mt-6\">\n                <h3 className=\"text-sm font-medium mb-2 flex items-center gap-2\">\n                  <LinkIcon className=\"h-4 w-4\" />\n                  Website\n                </h3>\n                <a\n                  href={artist.website}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-primary hover:underline\"\n                  data-testid=\"link-website\"\n                >\n                  {artist.website}\n                </a>\n              </div>\n            )}\n          </Card>\n\n          <div>\n            <h2 className=\"font-serif text-2xl font-semibold mb-6\">Projects</h2>\n            {projectsLoading ? (\n              <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                {[1, 2, 3].map((i) => (\n                  <Card key={i} className=\"overflow-hidden\">\n                    <Skeleton className=\"h-48 w-full\" />\n                    <div className=\"p-6\">\n                      <Skeleton className=\"h-6 w-3/4\" />\n                      <Skeleton className=\"mt-2 h-4 w-full\" />\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            ) : projects && projects.length > 0 ? (\n              <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n                {projects.map((project) => (\n                  <Card\n                    key={project.id}\n                    className=\"group cursor-pointer overflow-hidden hover-elevate\"\n                    onClick={() => setLocation(`/projects/${project.id}`)}\n                    data-testid={`card-project-${project.id}`}\n                  >\n                    <div className=\"relative aspect-video bg-muted\">\n                      <ProjectMediaDisplay project={project} />\n                    </div>\n                    <div className=\"p-6\">\n                      <h3 className=\"font-serif text-lg font-semibold line-clamp-1\">\n                        {project.title}\n                      </h3>\n                      <p className=\"mt-2 text-sm text-muted-foreground line-clamp-2\">\n                        {project.description}\n                      </p>\n                      <div className=\"mt-4 flex flex-wrap gap-2\">\n                        {project.genres.slice(0, 2).map((genre, idx) => (\n                          <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                            {genre}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"p-12 text-center\">\n                <Music className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                <h3 className=\"mt-4 font-serif text-lg font-semibold\">\n                  No projects yet\n                </h3>\n                <p className=\"mt-2 text-sm text-muted-foreground\">\n                  This artist hasn't shared any projects\n                </p>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9689}},"version":2}